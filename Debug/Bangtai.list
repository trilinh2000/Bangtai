
Bangtai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004568  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004758  08004758  00005758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047fc  080047fc  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  080047fc  080047fc  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047fc  080047fc  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047fc  080047fc  000057fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004800  08004800  00005800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004804  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019bc  20000014  08004818  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019d0  08004818  000069d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011737  00000000  00000000  0000603d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b80  00000000  00000000  00017774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  0001a2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf1  00000000  00000000  0001b3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000025d3  00000000  00000000  0001c0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001257e  00000000  00000000  0001e67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f70d  00000000  00000000  00030bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0307  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004594  00000000  00000000  000d034c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d48e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000014 	.word	0x20000014
 800020c:	00000000 	.word	0x00000000
 8000210:	08004740 	.word	0x08004740

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000018 	.word	0x20000018
 800022c:	08004740 	.word	0x08004740

08000230 <Motor_driver>:
/* USER CODE BEGIN 0 */
uint16_t req=0;
uint16_t tag=0;

void Motor_driver(Motor status)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	71fb      	strb	r3, [r7, #7]
	switch(status)
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d002      	beq.n	8000246 <Motor_driver+0x16>
 8000240:	2b01      	cmp	r3, #1
 8000242:	d00d      	beq.n	8000260 <Motor_driver+0x30>
 8000244:	e019      	b.n	800027a <Motor_driver+0x4a>
	{
		case Motor_load:
			HAL_GPIO_WritePin(Y00_GPIO_Port, Y00_Pin, GPIO_PIN_SET);//Motor Load
 8000246:	2201      	movs	r2, #1
 8000248:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800024c:	4813      	ldr	r0, [pc, #76]	@ (800029c <Motor_driver+0x6c>)
 800024e:	f000 fe76 	bl	8000f3e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y01_GPIO_Port, Y01_Pin, GPIO_PIN_RESET);
 8000252:	2200      	movs	r2, #0
 8000254:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000258:	4810      	ldr	r0, [pc, #64]	@ (800029c <Motor_driver+0x6c>)
 800025a:	f000 fe70 	bl	8000f3e <HAL_GPIO_WritePin>
			break;
 800025e:	e019      	b.n	8000294 <Motor_driver+0x64>
		case Motor_unload:
			HAL_GPIO_WritePin(Y00_GPIO_Port, Y00_Pin, GPIO_PIN_SET);//Motor UnLoad
 8000260:	2201      	movs	r2, #1
 8000262:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000266:	480d      	ldr	r0, [pc, #52]	@ (800029c <Motor_driver+0x6c>)
 8000268:	f000 fe69 	bl	8000f3e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y01_GPIO_Port, Y01_Pin, GPIO_PIN_SET);
 800026c:	2201      	movs	r2, #1
 800026e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000272:	480a      	ldr	r0, [pc, #40]	@ (800029c <Motor_driver+0x6c>)
 8000274:	f000 fe63 	bl	8000f3e <HAL_GPIO_WritePin>
			break;
 8000278:	e00c      	b.n	8000294 <Motor_driver+0x64>
		default:
			HAL_GPIO_WritePin(Y00_GPIO_Port, Y00_Pin, GPIO_PIN_RESET);//Motor Stop
 800027a:	2200      	movs	r2, #0
 800027c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000280:	4806      	ldr	r0, [pc, #24]	@ (800029c <Motor_driver+0x6c>)
 8000282:	f000 fe5c 	bl	8000f3e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y01_GPIO_Port, Y01_Pin, GPIO_PIN_RESET);
 8000286:	2200      	movs	r2, #0
 8000288:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800028c:	4803      	ldr	r0, [pc, #12]	@ (800029c <Motor_driver+0x6c>)
 800028e:	f000 fe56 	bl	8000f3e <HAL_GPIO_WritePin>
			break;
 8000292:	bf00      	nop
	}


}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40011000 	.word	0x40011000

080002a0 <Program_Run_Load>:
void Program_Run_Load(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(X04_GPIO_Port, X04_Pin)==1)//cb1
 80002a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002a8:	4824      	ldr	r0, [pc, #144]	@ (800033c <Program_Run_Load+0x9c>)
 80002aa:	f000 fe31 	bl	8000f10 <HAL_GPIO_ReadPin>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d102      	bne.n	80002ba <Program_Run_Load+0x1a>
	{
		tag=1;
 80002b4:	4b22      	ldr	r3, [pc, #136]	@ (8000340 <Program_Run_Load+0xa0>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	801a      	strh	r2, [r3, #0]
	}
	if(tag==1)
 80002ba:	4b21      	ldr	r3, [pc, #132]	@ (8000340 <Program_Run_Load+0xa0>)
 80002bc:	881b      	ldrh	r3, [r3, #0]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d139      	bne.n	8000336 <Program_Run_Load+0x96>
	{
		if(HAL_GPIO_ReadPin(X07_GPIO_Port, X07_Pin)==0)//red sensor3
 80002c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002c6:	481f      	ldr	r0, [pc, #124]	@ (8000344 <Program_Run_Load+0xa4>)
 80002c8:	f000 fe22 	bl	8000f10 <HAL_GPIO_ReadPin>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d12e      	bne.n	8000330 <Program_Run_Load+0x90>
		{
			HAL_GPIO_WritePin(Y04_GPIO_Port, Y04_Pin, GPIO_PIN_SET);//write sensor 3
 80002d2:	2201      	movs	r2, #1
 80002d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002d8:	4818      	ldr	r0, [pc, #96]	@ (800033c <Program_Run_Load+0x9c>)
 80002da:	f000 fe30 	bl	8000f3e <HAL_GPIO_WritePin>
			Motor_driver(Motor_load);
 80002de:	2000      	movs	r0, #0
 80002e0:	f7ff ffa6 	bl	8000230 <Motor_driver>
			if(HAL_GPIO_ReadPin(X04_GPIO_Port, X04_Pin)==0)//cb1=0
 80002e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002e8:	4814      	ldr	r0, [pc, #80]	@ (800033c <Program_Run_Load+0x9c>)
 80002ea:	f000 fe11 	bl	8000f10 <HAL_GPIO_ReadPin>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d120      	bne.n	8000336 <Program_Run_Load+0x96>
			{
				Motor_driver(Motor_stop);
 80002f4:	2002      	movs	r0, #2
 80002f6:	f7ff ff9b 	bl	8000230 <Motor_driver>
				HAL_GPIO_WritePin(Y02_GPIO_Port, Y02_Pin, GPIO_PIN_SET);//wirte sensor 1
 80002fa:	2201      	movs	r2, #1
 80002fc:	2101      	movs	r1, #1
 80002fe:	4811      	ldr	r0, [pc, #68]	@ (8000344 <Program_Run_Load+0xa4>)
 8000300:	f000 fe1d 	bl	8000f3e <HAL_GPIO_WritePin>
				req=0;
 8000304:	4b10      	ldr	r3, [pc, #64]	@ (8000348 <Program_Run_Load+0xa8>)
 8000306:	2200      	movs	r2, #0
 8000308:	801a      	strh	r2, [r3, #0]
				tag=0;
 800030a:	4b0d      	ldr	r3, [pc, #52]	@ (8000340 <Program_Run_Load+0xa0>)
 800030c:	2200      	movs	r2, #0
 800030e:	801a      	strh	r2, [r3, #0]
				HAL_Delay(500);
 8000310:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000314:	f000 fb64 	bl	80009e0 <HAL_Delay>
				HAL_GPIO_WritePin(Y02_GPIO_Port, Y02_Pin, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2101      	movs	r1, #1
 800031c:	4809      	ldr	r0, [pc, #36]	@ (8000344 <Program_Run_Load+0xa4>)
 800031e:	f000 fe0e 	bl	8000f3e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y04_GPIO_Port, Y04_Pin, GPIO_PIN_RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000328:	4804      	ldr	r0, [pc, #16]	@ (800033c <Program_Run_Load+0x9c>)
 800032a:	f000 fe08 	bl	8000f3e <HAL_GPIO_WritePin>
		else {
			Motor_driver(Motor_stop);
		}
	}

}
 800032e:	e002      	b.n	8000336 <Program_Run_Load+0x96>
			Motor_driver(Motor_stop);
 8000330:	2002      	movs	r0, #2
 8000332:	f7ff ff7d 	bl	8000230 <Motor_driver>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40010800 	.word	0x40010800
 8000340:	2000003a 	.word	0x2000003a
 8000344:	40010c00 	.word	0x40010c00
 8000348:	20000038 	.word	0x20000038

0800034c <Program_Run_UnLoad>:
void Program_Run_UnLoad(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(X04_GPIO_Port, X04_Pin)==0)//co hang cb 2
 8000350:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000354:	4824      	ldr	r0, [pc, #144]	@ (80003e8 <Program_Run_UnLoad+0x9c>)
 8000356:	f000 fddb 	bl	8000f10 <HAL_GPIO_ReadPin>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d102      	bne.n	8000366 <Program_Run_UnLoad+0x1a>
		{
			tag=1;
 8000360:	4b22      	ldr	r3, [pc, #136]	@ (80003ec <Program_Run_UnLoad+0xa0>)
 8000362:	2201      	movs	r2, #1
 8000364:	801a      	strh	r2, [r3, #0]
		}
		if(tag==1)
 8000366:	4b21      	ldr	r3, [pc, #132]	@ (80003ec <Program_Run_UnLoad+0xa0>)
 8000368:	881b      	ldrh	r3, [r3, #0]
 800036a:	2b01      	cmp	r3, #1
 800036c:	d139      	bne.n	80003e2 <Program_Run_UnLoad+0x96>
		{
			if(HAL_GPIO_ReadPin(X07_GPIO_Port, X07_Pin)==0)
 800036e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000372:	481f      	ldr	r0, [pc, #124]	@ (80003f0 <Program_Run_UnLoad+0xa4>)
 8000374:	f000 fdcc 	bl	8000f10 <HAL_GPIO_ReadPin>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d12e      	bne.n	80003dc <Program_Run_UnLoad+0x90>
			{
				HAL_GPIO_WritePin(Y04_GPIO_Port, Y04_Pin, GPIO_PIN_SET);
 800037e:	2201      	movs	r2, #1
 8000380:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000384:	4818      	ldr	r0, [pc, #96]	@ (80003e8 <Program_Run_UnLoad+0x9c>)
 8000386:	f000 fdda 	bl	8000f3e <HAL_GPIO_WritePin>
				Motor_driver(Motor_unload);
 800038a:	2001      	movs	r0, #1
 800038c:	f7ff ff50 	bl	8000230 <Motor_driver>
				if(HAL_GPIO_ReadPin(X05_GPIO_Port, X05_Pin)==0)
 8000390:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000394:	4814      	ldr	r0, [pc, #80]	@ (80003e8 <Program_Run_UnLoad+0x9c>)
 8000396:	f000 fdbb 	bl	8000f10 <HAL_GPIO_ReadPin>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d120      	bne.n	80003e2 <Program_Run_UnLoad+0x96>
				{
					Motor_driver(Motor_stop);
 80003a0:	2002      	movs	r0, #2
 80003a2:	f7ff ff45 	bl	8000230 <Motor_driver>
					HAL_GPIO_WritePin(Y02_GPIO_Port, Y02_Pin, GPIO_PIN_SET);
 80003a6:	2201      	movs	r2, #1
 80003a8:	2101      	movs	r1, #1
 80003aa:	4811      	ldr	r0, [pc, #68]	@ (80003f0 <Program_Run_UnLoad+0xa4>)
 80003ac:	f000 fdc7 	bl	8000f3e <HAL_GPIO_WritePin>
					req=0;
 80003b0:	4b10      	ldr	r3, [pc, #64]	@ (80003f4 <Program_Run_UnLoad+0xa8>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	801a      	strh	r2, [r3, #0]
					tag=0;
 80003b6:	4b0d      	ldr	r3, [pc, #52]	@ (80003ec <Program_Run_UnLoad+0xa0>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	801a      	strh	r2, [r3, #0]
					HAL_Delay(500);
 80003bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003c0:	f000 fb0e 	bl	80009e0 <HAL_Delay>
					HAL_GPIO_WritePin(Y02_GPIO_Port, Y02_Pin, GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2101      	movs	r1, #1
 80003c8:	4809      	ldr	r0, [pc, #36]	@ (80003f0 <Program_Run_UnLoad+0xa4>)
 80003ca:	f000 fdb8 	bl	8000f3e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Y04_GPIO_Port, Y04_Pin, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003d4:	4804      	ldr	r0, [pc, #16]	@ (80003e8 <Program_Run_UnLoad+0x9c>)
 80003d6:	f000 fdb2 	bl	8000f3e <HAL_GPIO_WritePin>
				Motor_driver(Motor_stop);
			}

		}

}
 80003da:	e002      	b.n	80003e2 <Program_Run_UnLoad+0x96>
				Motor_driver(Motor_stop);
 80003dc:	2002      	movs	r0, #2
 80003de:	f7ff ff27 	bl	8000230 <Motor_driver>
}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40010800 	.word	0x40010800
 80003ec:	2000003a 	.word	0x2000003a
 80003f0:	40010c00 	.word	0x40010c00
 80003f4:	20000038 	.word	0x20000038

080003f8 <Program_Stop>:
void Program_Stop(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
		Motor_driver(Motor_stop);
 80003fc:	2002      	movs	r0, #2
 80003fe:	f7ff ff17 	bl	8000230 <Motor_driver>
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040c:	f000 fab6 	bl	800097c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000410:	f000 f830 	bl	8000474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000414:	f000 f874 	bl	8000500 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(Y02_GPIO_Port, Y02_Pin, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	2101      	movs	r1, #1
 800041c:	480e      	ldr	r0, [pc, #56]	@ (8000458 <main+0x50>)
 800041e:	f000 fd8e 	bl	8000f3e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y03_GPIO_Port, Y03_Pin, GPIO_PIN_RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	2102      	movs	r1, #2
 8000426:	480c      	ldr	r0, [pc, #48]	@ (8000458 <main+0x50>)
 8000428:	f000 fd89 	bl	8000f3e <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800042c:	f001 fc3c 	bl	8001ca8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of buttonTask */
  buttonTaskHandle = osThreadNew(StartDefaultTask, NULL, &buttonTask_attributes);
 8000430:	4a0a      	ldr	r2, [pc, #40]	@ (800045c <main+0x54>)
 8000432:	2100      	movs	r1, #0
 8000434:	480a      	ldr	r0, [pc, #40]	@ (8000460 <main+0x58>)
 8000436:	f001 fc9d 	bl	8001d74 <osThreadNew>
 800043a:	4603      	mov	r3, r0
 800043c:	4a09      	ldr	r2, [pc, #36]	@ (8000464 <main+0x5c>)
 800043e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000440:	4a09      	ldr	r2, [pc, #36]	@ (8000468 <main+0x60>)
 8000442:	2100      	movs	r1, #0
 8000444:	4809      	ldr	r0, [pc, #36]	@ (800046c <main+0x64>)
 8000446:	f001 fc95 	bl	8001d74 <osThreadNew>
 800044a:	4603      	mov	r3, r0
 800044c:	4a08      	ldr	r2, [pc, #32]	@ (8000470 <main+0x68>)
 800044e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000450:	f001 fc5c 	bl	8001d0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <main+0x4c>
 8000458:	40010c00 	.word	0x40010c00
 800045c:	08004788 	.word	0x08004788
 8000460:	08000685 	.word	0x08000685
 8000464:	20000030 	.word	0x20000030
 8000468:	080047ac 	.word	0x080047ac
 800046c:	080006f5 	.word	0x080006f5
 8000470:	20000034 	.word	0x20000034

08000474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b090      	sub	sp, #64	@ 0x40
 8000478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047a:	f107 0318 	add.w	r3, r7, #24
 800047e:	2228      	movs	r2, #40	@ 0x28
 8000480:	2100      	movs	r1, #0
 8000482:	4618      	mov	r0, r3
 8000484:	f004 f922 	bl	80046cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]
 8000494:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000496:	2301      	movs	r3, #1
 8000498:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800049a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800049e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004a0:	2300      	movs	r3, #0
 80004a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a4:	2301      	movs	r3, #1
 80004a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a8:	2302      	movs	r3, #2
 80004aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004b2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80004b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b8:	f107 0318 	add.w	r3, r7, #24
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 fd57 	bl	8000f70 <HAL_RCC_OscConfig>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004c8:	f000 f94c 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004cc:	230f      	movs	r3, #15
 80004ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d0:	2302      	movs	r3, #2
 80004d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2102      	movs	r1, #2
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 ffc4 	bl	8001474 <HAL_RCC_ClockConfig>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004f2:	f000 f937 	bl	8000764 <Error_Handler>
  }
}
 80004f6:	bf00      	nop
 80004f8:	3740      	adds	r7, #64	@ 0x40
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000514:	4b57      	ldr	r3, [pc, #348]	@ (8000674 <MX_GPIO_Init+0x174>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a56      	ldr	r2, [pc, #344]	@ (8000674 <MX_GPIO_Init+0x174>)
 800051a:	f043 0320 	orr.w	r3, r3, #32
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b54      	ldr	r3, [pc, #336]	@ (8000674 <MX_GPIO_Init+0x174>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0320 	and.w	r3, r3, #32
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052c:	4b51      	ldr	r3, [pc, #324]	@ (8000674 <MX_GPIO_Init+0x174>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a50      	ldr	r2, [pc, #320]	@ (8000674 <MX_GPIO_Init+0x174>)
 8000532:	f043 0304 	orr.w	r3, r3, #4
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b4e      	ldr	r3, [pc, #312]	@ (8000674 <MX_GPIO_Init+0x174>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0304 	and.w	r3, r3, #4
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000544:	4b4b      	ldr	r3, [pc, #300]	@ (8000674 <MX_GPIO_Init+0x174>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a4a      	ldr	r2, [pc, #296]	@ (8000674 <MX_GPIO_Init+0x174>)
 800054a:	f043 0308 	orr.w	r3, r3, #8
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b48      	ldr	r3, [pc, #288]	@ (8000674 <MX_GPIO_Init+0x174>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0308 	and.w	r3, r3, #8
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055c:	4b45      	ldr	r3, [pc, #276]	@ (8000674 <MX_GPIO_Init+0x174>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a44      	ldr	r2, [pc, #272]	@ (8000674 <MX_GPIO_Init+0x174>)
 8000562:	f043 0310 	orr.w	r3, r3, #16
 8000566:	6193      	str	r3, [r2, #24]
 8000568:	4b42      	ldr	r3, [pc, #264]	@ (8000674 <MX_GPIO_Init+0x174>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	f003 0310 	and.w	r3, r3, #16
 8000570:	603b      	str	r3, [r7, #0]
 8000572:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y02_Pin|Y03_Pin|Y06_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	2113      	movs	r1, #19
 8000578:	483f      	ldr	r0, [pc, #252]	@ (8000678 <MX_GPIO_Init+0x178>)
 800057a:	f000 fce0 	bl	8000f3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Y05_Pin|Y00_Pin|Y01_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8000584:	483d      	ldr	r0, [pc, #244]	@ (800067c <MX_GPIO_Init+0x17c>)
 8000586:	f000 fcda 	bl	8000f3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Y04_GPIO_Port, Y04_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000590:	483b      	ldr	r0, [pc, #236]	@ (8000680 <MX_GPIO_Init+0x180>)
 8000592:	f000 fcd4 	bl	8000f3e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : X00_Pin X01_Pin X05_Pin */
  GPIO_InitStruct.Pin = X00_Pin|X01_Pin|X05_Pin;
 8000596:	f241 0303 	movw	r3, #4099	@ 0x1003
 800059a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4619      	mov	r1, r3
 80005aa:	4835      	ldr	r0, [pc, #212]	@ (8000680 <MX_GPIO_Init+0x180>)
 80005ac:	f000 fb1c 	bl	8000be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y02_Pin Y03_Pin Y06_Pin */
  GPIO_InitStruct.Pin = Y02_Pin|Y03_Pin|Y06_Pin;
 80005b0:	2313      	movs	r3, #19
 80005b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2302      	movs	r3, #2
 80005be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	4619      	mov	r1, r3
 80005c6:	482c      	ldr	r0, [pc, #176]	@ (8000678 <MX_GPIO_Init+0x178>)
 80005c8:	f000 fb0e 	bl	8000be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : X10_Pin X06_Pin X07_Pin */
  GPIO_InitStruct.Pin = X10_Pin|X06_Pin|X07_Pin;
 80005cc:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80005d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	4619      	mov	r1, r3
 80005e0:	4825      	ldr	r0, [pc, #148]	@ (8000678 <MX_GPIO_Init+0x178>)
 80005e2:	f000 fb01 	bl	8000be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : X02_Pin */
  GPIO_InitStruct.Pin = X02_Pin;
 80005e6:	2340      	movs	r3, #64	@ 0x40
 80005e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(X02_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 0310 	add.w	r3, r7, #16
 80005f6:	4619      	mov	r1, r3
 80005f8:	4820      	ldr	r0, [pc, #128]	@ (800067c <MX_GPIO_Init+0x17c>)
 80005fa:	f000 faf5 	bl	8000be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : X03_Pin */
  GPIO_InitStruct.Pin = X03_Pin;
 80005fe:	2380      	movs	r3, #128	@ 0x80
 8000600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000606:	2301      	movs	r3, #1
 8000608:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(X03_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 0310 	add.w	r3, r7, #16
 800060e:	4619      	mov	r1, r3
 8000610:	481a      	ldr	r0, [pc, #104]	@ (800067c <MX_GPIO_Init+0x17c>)
 8000612:	f000 fae9 	bl	8000be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y05_Pin Y00_Pin Y01_Pin */
  GPIO_InitStruct.Pin = Y05_Pin|Y00_Pin|Y01_Pin;
 8000616:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 800061a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061c:	2301      	movs	r3, #1
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	2302      	movs	r3, #2
 8000626:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	4619      	mov	r1, r3
 800062e:	4813      	ldr	r0, [pc, #76]	@ (800067c <MX_GPIO_Init+0x17c>)
 8000630:	f000 fada 	bl	8000be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Y04_Pin */
  GPIO_InitStruct.Pin = Y04_Pin;
 8000634:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2302      	movs	r3, #2
 8000644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Y04_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 0310 	add.w	r3, r7, #16
 800064a:	4619      	mov	r1, r3
 800064c:	480c      	ldr	r0, [pc, #48]	@ (8000680 <MX_GPIO_Init+0x180>)
 800064e:	f000 facb 	bl	8000be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : X04_Pin */
  GPIO_InitStruct.Pin = X04_Pin;
 8000652:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800065c:	2301      	movs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(X04_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	4619      	mov	r1, r3
 8000666:	4806      	ldr	r0, [pc, #24]	@ (8000680 <MX_GPIO_Init+0x180>)
 8000668:	f000 fabe 	bl	8000be8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800066c:	bf00      	nop
 800066e:	3720      	adds	r7, #32
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000
 8000678:	40010c00 	.word	0x40010c00
 800067c:	40011000 	.word	0x40011000
 8000680:	40010800 	.word	0x40010800

08000684 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	 if(HAL_GPIO_ReadPin(X00_GPIO_Port, X00_Pin)==0)
 800068c:	2101      	movs	r1, #1
 800068e:	4816      	ldr	r0, [pc, #88]	@ (80006e8 <StartDefaultTask+0x64>)
 8000690:	f000 fc3e 	bl	8000f10 <HAL_GPIO_ReadPin>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d104      	bne.n	80006a4 <StartDefaultTask+0x20>
	 {
		 programState=PROGRAM_STOPPED;
 800069a:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <StartDefaultTask+0x68>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
		 Program_Stop();
 80006a0:	f7ff feaa 	bl	80003f8 <Program_Stop>
	 }
	 if(HAL_GPIO_ReadPin(X00_GPIO_Port, X00_Pin)==1&&HAL_GPIO_ReadPin(X01_GPIO_Port, X01_Pin)==0)
 80006a4:	2101      	movs	r1, #1
 80006a6:	4810      	ldr	r0, [pc, #64]	@ (80006e8 <StartDefaultTask+0x64>)
 80006a8:	f000 fc32 	bl	8000f10 <HAL_GPIO_ReadPin>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d109      	bne.n	80006c6 <StartDefaultTask+0x42>
 80006b2:	2102      	movs	r1, #2
 80006b4:	480c      	ldr	r0, [pc, #48]	@ (80006e8 <StartDefaultTask+0x64>)
 80006b6:	f000 fc2b 	bl	8000f10 <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d102      	bne.n	80006c6 <StartDefaultTask+0x42>
	 {
		 programState=PROGRAM_RUNNING;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <StartDefaultTask+0x68>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
	 }
	 if(HAL_GPIO_ReadPin(X02_GPIO_Port, X02_Pin)==0)
 80006c6:	2140      	movs	r1, #64	@ 0x40
 80006c8:	4809      	ldr	r0, [pc, #36]	@ (80006f0 <StartDefaultTask+0x6c>)
 80006ca:	f000 fc21 	bl	8000f10 <HAL_GPIO_ReadPin>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d104      	bne.n	80006de <StartDefaultTask+0x5a>
	 {
		 programState=PROGRAM_STOPPED;
 80006d4:	4b05      	ldr	r3, [pc, #20]	@ (80006ec <StartDefaultTask+0x68>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
		 Program_Stop();
 80006da:	f7ff fe8d 	bl	80003f8 <Program_Stop>
	 }
    osDelay(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f001 fbf2 	bl	8001ec8 <osDelay>
	 if(HAL_GPIO_ReadPin(X00_GPIO_Port, X00_Pin)==0)
 80006e4:	e7d2      	b.n	800068c <StartDefaultTask+0x8>
 80006e6:	bf00      	nop
 80006e8:	40010800 	.word	0x40010800
 80006ec:	20000000 	.word	0x20000000
 80006f0:	40011000 	.word	0x40011000

080006f4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(programState==PROGRAM_RUNNING){
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <StartTask02+0x44>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d114      	bne.n	800072e <StartTask02+0x3a>
		  if(HAL_GPIO_ReadPin(X06_GPIO_Port, X06_Pin)==1)
 8000704:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000708:	480c      	ldr	r0, [pc, #48]	@ (800073c <StartTask02+0x48>)
 800070a:	f000 fc01 	bl	8000f10 <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b01      	cmp	r3, #1
 8000712:	d102      	bne.n	800071a <StartTask02+0x26>
			  {
				  Program_Run_Load();
 8000714:	f7ff fdc4 	bl	80002a0 <Program_Run_Load>
 8000718:	e009      	b.n	800072e <StartTask02+0x3a>
			  }
			  else if(HAL_GPIO_ReadPin(X06_GPIO_Port, X06_Pin)==0){
 800071a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800071e:	4807      	ldr	r0, [pc, #28]	@ (800073c <StartTask02+0x48>)
 8000720:	f000 fbf6 	bl	8000f10 <HAL_GPIO_ReadPin>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d101      	bne.n	800072e <StartTask02+0x3a>
				  Program_Run_UnLoad();
 800072a:	f7ff fe0f 	bl	800034c <Program_Run_UnLoad>
	  }
	  else{

	  }

    osDelay(1);
 800072e:	2001      	movs	r0, #1
 8000730:	f001 fbca 	bl	8001ec8 <osDelay>
	  if(programState==PROGRAM_RUNNING){
 8000734:	e7e2      	b.n	80006fc <StartTask02+0x8>
 8000736:	bf00      	nop
 8000738:	20000000 	.word	0x20000000
 800073c:	40010c00 	.word	0x40010c00

08000740 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a04      	ldr	r2, [pc, #16]	@ (8000760 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d101      	bne.n	8000756 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000752:	f000 f929 	bl	80009a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40000800 	.word	0x40000800

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <Error_Handler+0x8>

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000776:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <HAL_MspInit+0x68>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	4a17      	ldr	r2, [pc, #92]	@ (80007d8 <HAL_MspInit+0x68>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6193      	str	r3, [r2, #24]
 8000782:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <HAL_MspInit+0x68>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <HAL_MspInit+0x68>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	4a11      	ldr	r2, [pc, #68]	@ (80007d8 <HAL_MspInit+0x68>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000798:	61d3      	str	r3, [r2, #28]
 800079a:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <HAL_MspInit+0x68>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	210f      	movs	r1, #15
 80007aa:	f06f 0001 	mvn.w	r0, #1
 80007ae:	f000 f9f0 	bl	8000b92 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007b2:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <HAL_MspInit+0x6c>)
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	4a04      	ldr	r2, [pc, #16]	@ (80007dc <HAL_MspInit+0x6c>)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40010000 	.word	0x40010000

080007e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08e      	sub	sp, #56	@ 0x38
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80007f0:	2300      	movs	r3, #0
 80007f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80007f6:	4b34      	ldr	r3, [pc, #208]	@ (80008c8 <HAL_InitTick+0xe8>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	4a33      	ldr	r2, [pc, #204]	@ (80008c8 <HAL_InitTick+0xe8>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	61d3      	str	r3, [r2, #28]
 8000802:	4b31      	ldr	r3, [pc, #196]	@ (80008c8 <HAL_InitTick+0xe8>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800080e:	f107 0210 	add.w	r2, r7, #16
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f000 ff87 	bl	800172c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800081e:	6a3b      	ldr	r3, [r7, #32]
 8000820:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000824:	2b00      	cmp	r3, #0
 8000826:	d103      	bne.n	8000830 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000828:	f000 ff6c 	bl	8001704 <HAL_RCC_GetPCLK1Freq>
 800082c:	6378      	str	r0, [r7, #52]	@ 0x34
 800082e:	e004      	b.n	800083a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000830:	f000 ff68 	bl	8001704 <HAL_RCC_GetPCLK1Freq>
 8000834:	4603      	mov	r3, r0
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800083a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800083c:	4a23      	ldr	r2, [pc, #140]	@ (80008cc <HAL_InitTick+0xec>)
 800083e:	fba2 2303 	umull	r2, r3, r2, r3
 8000842:	0c9b      	lsrs	r3, r3, #18
 8000844:	3b01      	subs	r3, #1
 8000846:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000848:	4b21      	ldr	r3, [pc, #132]	@ (80008d0 <HAL_InitTick+0xf0>)
 800084a:	4a22      	ldr	r2, [pc, #136]	@ (80008d4 <HAL_InitTick+0xf4>)
 800084c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800084e:	4b20      	ldr	r3, [pc, #128]	@ (80008d0 <HAL_InitTick+0xf0>)
 8000850:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000854:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000856:	4a1e      	ldr	r2, [pc, #120]	@ (80008d0 <HAL_InitTick+0xf0>)
 8000858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800085a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800085c:	4b1c      	ldr	r3, [pc, #112]	@ (80008d0 <HAL_InitTick+0xf0>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000862:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <HAL_InitTick+0xf0>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000868:	4b19      	ldr	r3, [pc, #100]	@ (80008d0 <HAL_InitTick+0xf0>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800086e:	4818      	ldr	r0, [pc, #96]	@ (80008d0 <HAL_InitTick+0xf0>)
 8000870:	f000 ffaa 	bl	80017c8 <HAL_TIM_Base_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800087a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800087e:	2b00      	cmp	r3, #0
 8000880:	d11b      	bne.n	80008ba <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000882:	4813      	ldr	r0, [pc, #76]	@ (80008d0 <HAL_InitTick+0xf0>)
 8000884:	f000 fff8 	bl	8001878 <HAL_TIM_Base_Start_IT>
 8000888:	4603      	mov	r3, r0
 800088a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800088e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000892:	2b00      	cmp	r3, #0
 8000894:	d111      	bne.n	80008ba <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000896:	201e      	movs	r0, #30
 8000898:	f000 f997 	bl	8000bca <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b0f      	cmp	r3, #15
 80008a0:	d808      	bhi.n	80008b4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80008a2:	2200      	movs	r2, #0
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	201e      	movs	r0, #30
 80008a8:	f000 f973 	bl	8000b92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ac:	4a0a      	ldr	r2, [pc, #40]	@ (80008d8 <HAL_InitTick+0xf8>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6013      	str	r3, [r2, #0]
 80008b2:	e002      	b.n	80008ba <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80008b4:	2301      	movs	r3, #1
 80008b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3738      	adds	r7, #56	@ 0x38
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40021000 	.word	0x40021000
 80008cc:	431bde83 	.word	0x431bde83
 80008d0:	2000003c 	.word	0x2000003c
 80008d4:	40000800 	.word	0x40000800
 80008d8:	20000008 	.word	0x20000008

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <NMI_Handler+0x4>

080008e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <MemManage_Handler+0x4>

080008f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <UsageFault_Handler+0x4>

08000904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000914:	4802      	ldr	r0, [pc, #8]	@ (8000920 <TIM4_IRQHandler+0x10>)
 8000916:	f001 f80f 	bl	8001938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000003c 	.word	0x2000003c

08000924 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000930:	f7ff fff8 	bl	8000924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000934:	480b      	ldr	r0, [pc, #44]	@ (8000964 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000936:	490c      	ldr	r1, [pc, #48]	@ (8000968 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000938:	4a0c      	ldr	r2, [pc, #48]	@ (800096c <LoopFillZerobss+0x16>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a09      	ldr	r2, [pc, #36]	@ (8000970 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800094c:	4c09      	ldr	r4, [pc, #36]	@ (8000974 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800095a:	f003 febf 	bl	80046dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095e:	f7ff fd53 	bl	8000408 <main>
  bx lr
 8000962:	4770      	bx	lr
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800096c:	08004804 	.word	0x08004804
  ldr r2, =_sbss
 8000970:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000974:	200019d0 	.word	0x200019d0

08000978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC1_2_IRQHandler>
	...

0800097c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <HAL_Init+0x28>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a07      	ldr	r2, [pc, #28]	@ (80009a4 <HAL_Init+0x28>)
 8000986:	f043 0310 	orr.w	r3, r3, #16
 800098a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f8f5 	bl	8000b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000992:	200f      	movs	r0, #15
 8000994:	f7ff ff24 	bl	80007e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f7ff feea 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40022000 	.word	0x40022000

080009a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ac:	4b05      	ldr	r3, [pc, #20]	@ (80009c4 <HAL_IncTick+0x1c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <HAL_IncTick+0x20>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a03      	ldr	r2, [pc, #12]	@ (80009c8 <HAL_IncTick+0x20>)
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	2000000c 	.word	0x2000000c
 80009c8:	20000084 	.word	0x20000084

080009cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return uwTick;
 80009d0:	4b02      	ldr	r3, [pc, #8]	@ (80009dc <HAL_GetTick+0x10>)
 80009d2:	681b      	ldr	r3, [r3, #0]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	20000084 	.word	0x20000084

080009e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e8:	f7ff fff0 	bl	80009cc <HAL_GetTick>
 80009ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f8:	d005      	beq.n	8000a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <HAL_Delay+0x44>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4413      	add	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a06:	bf00      	nop
 8000a08:	f7ff ffe0 	bl	80009cc <HAL_GetTick>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d8f7      	bhi.n	8000a08 <HAL_Delay+0x28>
  {
  }
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000000c 	.word	0x2000000c

08000a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5a:	4a04      	ldr	r2, [pc, #16]	@ (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	60d3      	str	r3, [r2, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a74:	4b04      	ldr	r3, [pc, #16]	@ (8000a88 <__NVIC_GetPriorityGrouping+0x18>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	f003 0307 	and.w	r3, r3, #7
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	db0b      	blt.n	8000ab6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	f003 021f 	and.w	r2, r3, #31
 8000aa4:	4906      	ldr	r1, [pc, #24]	@ (8000ac0 <__NVIC_EnableIRQ+0x34>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	095b      	lsrs	r3, r3, #5
 8000aac:	2001      	movs	r0, #1
 8000aae:	fa00 f202 	lsl.w	r2, r0, r2
 8000ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	e000e100 	.word	0xe000e100

08000ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db0a      	blt.n	8000aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	490c      	ldr	r1, [pc, #48]	@ (8000b10 <__NVIC_SetPriority+0x4c>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	0112      	lsls	r2, r2, #4
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aec:	e00a      	b.n	8000b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4908      	ldr	r1, [pc, #32]	@ (8000b14 <__NVIC_SetPriority+0x50>)
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	f003 030f 	and.w	r3, r3, #15
 8000afa:	3b04      	subs	r3, #4
 8000afc:	0112      	lsls	r2, r2, #4
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	440b      	add	r3, r1
 8000b02:	761a      	strb	r2, [r3, #24]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000e100 	.word	0xe000e100
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b089      	sub	sp, #36	@ 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	f1c3 0307 	rsb	r3, r3, #7
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	bf28      	it	cs
 8000b36:	2304      	movcs	r3, #4
 8000b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	2b06      	cmp	r3, #6
 8000b40:	d902      	bls.n	8000b48 <NVIC_EncodePriority+0x30>
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3b03      	subs	r3, #3
 8000b46:	e000      	b.n	8000b4a <NVIC_EncodePriority+0x32>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43da      	mvns	r2, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b60:	f04f 31ff 	mov.w	r1, #4294967295
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43d9      	mvns	r1, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	4313      	orrs	r3, r2
         );
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3724      	adds	r7, #36	@ 0x24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr

08000b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff4f 	bl	8000a28 <__NVIC_SetPriorityGrouping>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba4:	f7ff ff64 	bl	8000a70 <__NVIC_GetPriorityGrouping>
 8000ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	68b9      	ldr	r1, [r7, #8]
 8000bae:	6978      	ldr	r0, [r7, #20]
 8000bb0:	f7ff ffb2 	bl	8000b18 <NVIC_EncodePriority>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff81 	bl	8000ac4 <__NVIC_SetPriority>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff57 	bl	8000a8c <__NVIC_EnableIRQ>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b08b      	sub	sp, #44	@ 0x2c
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bfa:	e179      	b.n	8000ef0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	69fa      	ldr	r2, [r7, #28]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	f040 8168 	bne.w	8000eea <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	4a96      	ldr	r2, [pc, #600]	@ (8000e78 <HAL_GPIO_Init+0x290>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d05e      	beq.n	8000ce2 <HAL_GPIO_Init+0xfa>
 8000c24:	4a94      	ldr	r2, [pc, #592]	@ (8000e78 <HAL_GPIO_Init+0x290>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d875      	bhi.n	8000d16 <HAL_GPIO_Init+0x12e>
 8000c2a:	4a94      	ldr	r2, [pc, #592]	@ (8000e7c <HAL_GPIO_Init+0x294>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d058      	beq.n	8000ce2 <HAL_GPIO_Init+0xfa>
 8000c30:	4a92      	ldr	r2, [pc, #584]	@ (8000e7c <HAL_GPIO_Init+0x294>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d86f      	bhi.n	8000d16 <HAL_GPIO_Init+0x12e>
 8000c36:	4a92      	ldr	r2, [pc, #584]	@ (8000e80 <HAL_GPIO_Init+0x298>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d052      	beq.n	8000ce2 <HAL_GPIO_Init+0xfa>
 8000c3c:	4a90      	ldr	r2, [pc, #576]	@ (8000e80 <HAL_GPIO_Init+0x298>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d869      	bhi.n	8000d16 <HAL_GPIO_Init+0x12e>
 8000c42:	4a90      	ldr	r2, [pc, #576]	@ (8000e84 <HAL_GPIO_Init+0x29c>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d04c      	beq.n	8000ce2 <HAL_GPIO_Init+0xfa>
 8000c48:	4a8e      	ldr	r2, [pc, #568]	@ (8000e84 <HAL_GPIO_Init+0x29c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d863      	bhi.n	8000d16 <HAL_GPIO_Init+0x12e>
 8000c4e:	4a8e      	ldr	r2, [pc, #568]	@ (8000e88 <HAL_GPIO_Init+0x2a0>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d046      	beq.n	8000ce2 <HAL_GPIO_Init+0xfa>
 8000c54:	4a8c      	ldr	r2, [pc, #560]	@ (8000e88 <HAL_GPIO_Init+0x2a0>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d85d      	bhi.n	8000d16 <HAL_GPIO_Init+0x12e>
 8000c5a:	2b12      	cmp	r3, #18
 8000c5c:	d82a      	bhi.n	8000cb4 <HAL_GPIO_Init+0xcc>
 8000c5e:	2b12      	cmp	r3, #18
 8000c60:	d859      	bhi.n	8000d16 <HAL_GPIO_Init+0x12e>
 8000c62:	a201      	add	r2, pc, #4	@ (adr r2, 8000c68 <HAL_GPIO_Init+0x80>)
 8000c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c68:	08000ce3 	.word	0x08000ce3
 8000c6c:	08000cbd 	.word	0x08000cbd
 8000c70:	08000ccf 	.word	0x08000ccf
 8000c74:	08000d11 	.word	0x08000d11
 8000c78:	08000d17 	.word	0x08000d17
 8000c7c:	08000d17 	.word	0x08000d17
 8000c80:	08000d17 	.word	0x08000d17
 8000c84:	08000d17 	.word	0x08000d17
 8000c88:	08000d17 	.word	0x08000d17
 8000c8c:	08000d17 	.word	0x08000d17
 8000c90:	08000d17 	.word	0x08000d17
 8000c94:	08000d17 	.word	0x08000d17
 8000c98:	08000d17 	.word	0x08000d17
 8000c9c:	08000d17 	.word	0x08000d17
 8000ca0:	08000d17 	.word	0x08000d17
 8000ca4:	08000d17 	.word	0x08000d17
 8000ca8:	08000d17 	.word	0x08000d17
 8000cac:	08000cc5 	.word	0x08000cc5
 8000cb0:	08000cd9 	.word	0x08000cd9
 8000cb4:	4a75      	ldr	r2, [pc, #468]	@ (8000e8c <HAL_GPIO_Init+0x2a4>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d013      	beq.n	8000ce2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cba:	e02c      	b.n	8000d16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	623b      	str	r3, [r7, #32]
          break;
 8000cc2:	e029      	b.n	8000d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	623b      	str	r3, [r7, #32]
          break;
 8000ccc:	e024      	b.n	8000d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	3308      	adds	r3, #8
 8000cd4:	623b      	str	r3, [r7, #32]
          break;
 8000cd6:	e01f      	b.n	8000d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	330c      	adds	r3, #12
 8000cde:	623b      	str	r3, [r7, #32]
          break;
 8000ce0:	e01a      	b.n	8000d18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d102      	bne.n	8000cf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cea:	2304      	movs	r3, #4
 8000cec:	623b      	str	r3, [r7, #32]
          break;
 8000cee:	e013      	b.n	8000d18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d105      	bne.n	8000d04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	69fa      	ldr	r2, [r7, #28]
 8000d00:	611a      	str	r2, [r3, #16]
          break;
 8000d02:	e009      	b.n	8000d18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d04:	2308      	movs	r3, #8
 8000d06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	69fa      	ldr	r2, [r7, #28]
 8000d0c:	615a      	str	r2, [r3, #20]
          break;
 8000d0e:	e003      	b.n	8000d18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
          break;
 8000d14:	e000      	b.n	8000d18 <HAL_GPIO_Init+0x130>
          break;
 8000d16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	2bff      	cmp	r3, #255	@ 0xff
 8000d1c:	d801      	bhi.n	8000d22 <HAL_GPIO_Init+0x13a>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	e001      	b.n	8000d26 <HAL_GPIO_Init+0x13e>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3304      	adds	r3, #4
 8000d26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2bff      	cmp	r3, #255	@ 0xff
 8000d2c:	d802      	bhi.n	8000d34 <HAL_GPIO_Init+0x14c>
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	e002      	b.n	8000d3a <HAL_GPIO_Init+0x152>
 8000d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d36:	3b08      	subs	r3, #8
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	210f      	movs	r1, #15
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	fa01 f303 	lsl.w	r3, r1, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	6a39      	ldr	r1, [r7, #32]
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	431a      	orrs	r2, r3
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f000 80c1 	beq.w	8000eea <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d68:	4b49      	ldr	r3, [pc, #292]	@ (8000e90 <HAL_GPIO_Init+0x2a8>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a48      	ldr	r2, [pc, #288]	@ (8000e90 <HAL_GPIO_Init+0x2a8>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b46      	ldr	r3, [pc, #280]	@ (8000e90 <HAL_GPIO_Init+0x2a8>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d80:	4a44      	ldr	r2, [pc, #272]	@ (8000e94 <HAL_GPIO_Init+0x2ac>)
 8000d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d84:	089b      	lsrs	r3, r3, #2
 8000d86:	3302      	adds	r3, #2
 8000d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	220f      	movs	r2, #15
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	4013      	ands	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a3c      	ldr	r2, [pc, #240]	@ (8000e98 <HAL_GPIO_Init+0x2b0>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d01f      	beq.n	8000dec <HAL_GPIO_Init+0x204>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a3b      	ldr	r2, [pc, #236]	@ (8000e9c <HAL_GPIO_Init+0x2b4>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d019      	beq.n	8000de8 <HAL_GPIO_Init+0x200>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a3a      	ldr	r2, [pc, #232]	@ (8000ea0 <HAL_GPIO_Init+0x2b8>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d013      	beq.n	8000de4 <HAL_GPIO_Init+0x1fc>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a39      	ldr	r2, [pc, #228]	@ (8000ea4 <HAL_GPIO_Init+0x2bc>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d00d      	beq.n	8000de0 <HAL_GPIO_Init+0x1f8>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a38      	ldr	r2, [pc, #224]	@ (8000ea8 <HAL_GPIO_Init+0x2c0>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d007      	beq.n	8000ddc <HAL_GPIO_Init+0x1f4>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a37      	ldr	r2, [pc, #220]	@ (8000eac <HAL_GPIO_Init+0x2c4>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d101      	bne.n	8000dd8 <HAL_GPIO_Init+0x1f0>
 8000dd4:	2305      	movs	r3, #5
 8000dd6:	e00a      	b.n	8000dee <HAL_GPIO_Init+0x206>
 8000dd8:	2306      	movs	r3, #6
 8000dda:	e008      	b.n	8000dee <HAL_GPIO_Init+0x206>
 8000ddc:	2304      	movs	r3, #4
 8000dde:	e006      	b.n	8000dee <HAL_GPIO_Init+0x206>
 8000de0:	2303      	movs	r3, #3
 8000de2:	e004      	b.n	8000dee <HAL_GPIO_Init+0x206>
 8000de4:	2302      	movs	r3, #2
 8000de6:	e002      	b.n	8000dee <HAL_GPIO_Init+0x206>
 8000de8:	2301      	movs	r3, #1
 8000dea:	e000      	b.n	8000dee <HAL_GPIO_Init+0x206>
 8000dec:	2300      	movs	r3, #0
 8000dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000df0:	f002 0203 	and.w	r2, r2, #3
 8000df4:	0092      	lsls	r2, r2, #2
 8000df6:	4093      	lsls	r3, r2
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dfe:	4925      	ldr	r1, [pc, #148]	@ (8000e94 <HAL_GPIO_Init+0x2ac>)
 8000e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	3302      	adds	r3, #2
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d006      	beq.n	8000e26 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e18:	4b25      	ldr	r3, [pc, #148]	@ (8000eb0 <HAL_GPIO_Init+0x2c8>)
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	4924      	ldr	r1, [pc, #144]	@ (8000eb0 <HAL_GPIO_Init+0x2c8>)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	608b      	str	r3, [r1, #8]
 8000e24:	e006      	b.n	8000e34 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e26:	4b22      	ldr	r3, [pc, #136]	@ (8000eb0 <HAL_GPIO_Init+0x2c8>)
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	4920      	ldr	r1, [pc, #128]	@ (8000eb0 <HAL_GPIO_Init+0x2c8>)
 8000e30:	4013      	ands	r3, r2
 8000e32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d006      	beq.n	8000e4e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e40:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <HAL_GPIO_Init+0x2c8>)
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	491a      	ldr	r1, [pc, #104]	@ (8000eb0 <HAL_GPIO_Init+0x2c8>)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	60cb      	str	r3, [r1, #12]
 8000e4c:	e006      	b.n	8000e5c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e4e:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <HAL_GPIO_Init+0x2c8>)
 8000e50:	68da      	ldr	r2, [r3, #12]
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	4916      	ldr	r1, [pc, #88]	@ (8000eb0 <HAL_GPIO_Init+0x2c8>)
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d025      	beq.n	8000eb4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e68:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <HAL_GPIO_Init+0x2c8>)
 8000e6a:	685a      	ldr	r2, [r3, #4]
 8000e6c:	4910      	ldr	r1, [pc, #64]	@ (8000eb0 <HAL_GPIO_Init+0x2c8>)
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	604b      	str	r3, [r1, #4]
 8000e74:	e025      	b.n	8000ec2 <HAL_GPIO_Init+0x2da>
 8000e76:	bf00      	nop
 8000e78:	10320000 	.word	0x10320000
 8000e7c:	10310000 	.word	0x10310000
 8000e80:	10220000 	.word	0x10220000
 8000e84:	10210000 	.word	0x10210000
 8000e88:	10120000 	.word	0x10120000
 8000e8c:	10110000 	.word	0x10110000
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40010000 	.word	0x40010000
 8000e98:	40010800 	.word	0x40010800
 8000e9c:	40010c00 	.word	0x40010c00
 8000ea0:	40011000 	.word	0x40011000
 8000ea4:	40011400 	.word	0x40011400
 8000ea8:	40011800 	.word	0x40011800
 8000eac:	40011c00 	.word	0x40011c00
 8000eb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eb4:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <HAL_GPIO_Init+0x324>)
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	4913      	ldr	r1, [pc, #76]	@ (8000f0c <HAL_GPIO_Init+0x324>)
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d006      	beq.n	8000edc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ece:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <HAL_GPIO_Init+0x324>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	490e      	ldr	r1, [pc, #56]	@ (8000f0c <HAL_GPIO_Init+0x324>)
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	600b      	str	r3, [r1, #0]
 8000eda:	e006      	b.n	8000eea <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000edc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <HAL_GPIO_Init+0x324>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	4909      	ldr	r1, [pc, #36]	@ (8000f0c <HAL_GPIO_Init+0x324>)
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eec:	3301      	adds	r3, #1
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f47f ae7e 	bne.w	8000bfc <HAL_GPIO_Init+0x14>
  }
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	372c      	adds	r7, #44	@ 0x2c
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	40010400 	.word	0x40010400

08000f10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	e001      	b.n	8000f32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr

08000f3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	460b      	mov	r3, r1
 8000f48:	807b      	strh	r3, [r7, #2]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f4e:	787b      	ldrb	r3, [r7, #1]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f54:	887a      	ldrh	r2, [r7, #2]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f5a:	e003      	b.n	8000f64 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f5c:	887b      	ldrh	r3, [r7, #2]
 8000f5e:	041a      	lsls	r2, r3, #16
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	611a      	str	r2, [r3, #16]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
	...

08000f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e272      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 8087 	beq.w	800109e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f90:	4b92      	ldr	r3, [pc, #584]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 030c 	and.w	r3, r3, #12
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d00c      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f9c:	4b8f      	ldr	r3, [pc, #572]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 030c 	and.w	r3, r3, #12
 8000fa4:	2b08      	cmp	r3, #8
 8000fa6:	d112      	bne.n	8000fce <HAL_RCC_OscConfig+0x5e>
 8000fa8:	4b8c      	ldr	r3, [pc, #560]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fb4:	d10b      	bne.n	8000fce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb6:	4b89      	ldr	r3, [pc, #548]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d06c      	beq.n	800109c <HAL_RCC_OscConfig+0x12c>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d168      	bne.n	800109c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e24c      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fd6:	d106      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x76>
 8000fd8:	4b80      	ldr	r3, [pc, #512]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a7f      	ldr	r2, [pc, #508]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000fde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	e02e      	b.n	8001044 <HAL_RCC_OscConfig+0xd4>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10c      	bne.n	8001008 <HAL_RCC_OscConfig+0x98>
 8000fee:	4b7b      	ldr	r3, [pc, #492]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a7a      	ldr	r2, [pc, #488]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	4b78      	ldr	r3, [pc, #480]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a77      	ldr	r2, [pc, #476]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001000:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	e01d      	b.n	8001044 <HAL_RCC_OscConfig+0xd4>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001010:	d10c      	bne.n	800102c <HAL_RCC_OscConfig+0xbc>
 8001012:	4b72      	ldr	r3, [pc, #456]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a71      	ldr	r2, [pc, #452]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001018:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	4b6f      	ldr	r3, [pc, #444]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a6e      	ldr	r2, [pc, #440]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	e00b      	b.n	8001044 <HAL_RCC_OscConfig+0xd4>
 800102c:	4b6b      	ldr	r3, [pc, #428]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a6a      	ldr	r2, [pc, #424]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001032:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b68      	ldr	r3, [pc, #416]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a67      	ldr	r2, [pc, #412]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 800103e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001042:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d013      	beq.n	8001074 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fcbe 	bl	80009cc <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001054:	f7ff fcba 	bl	80009cc <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b64      	cmp	r3, #100	@ 0x64
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e200      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001066:	4b5d      	ldr	r3, [pc, #372]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f0      	beq.n	8001054 <HAL_RCC_OscConfig+0xe4>
 8001072:	e014      	b.n	800109e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fcaa 	bl	80009cc <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800107c:	f7ff fca6 	bl	80009cc <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b64      	cmp	r3, #100	@ 0x64
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e1ec      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108e:	4b53      	ldr	r3, [pc, #332]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f0      	bne.n	800107c <HAL_RCC_OscConfig+0x10c>
 800109a:	e000      	b.n	800109e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d063      	beq.n	8001172 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010aa:	4b4c      	ldr	r3, [pc, #304]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 030c 	and.w	r3, r3, #12
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00b      	beq.n	80010ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010b6:	4b49      	ldr	r3, [pc, #292]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d11c      	bne.n	80010fc <HAL_RCC_OscConfig+0x18c>
 80010c2:	4b46      	ldr	r3, [pc, #280]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d116      	bne.n	80010fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ce:	4b43      	ldr	r3, [pc, #268]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d005      	beq.n	80010e6 <HAL_RCC_OscConfig+0x176>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d001      	beq.n	80010e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e1c0      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e6:	4b3d      	ldr	r3, [pc, #244]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	4939      	ldr	r1, [pc, #228]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fa:	e03a      	b.n	8001172 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d020      	beq.n	8001146 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001104:	4b36      	ldr	r3, [pc, #216]	@ (80011e0 <HAL_RCC_OscConfig+0x270>)
 8001106:	2201      	movs	r2, #1
 8001108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110a:	f7ff fc5f 	bl	80009cc <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001112:	f7ff fc5b 	bl	80009cc <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e1a1      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001124:	4b2d      	ldr	r3, [pc, #180]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0f0      	beq.n	8001112 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001130:	4b2a      	ldr	r3, [pc, #168]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	4927      	ldr	r1, [pc, #156]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001140:	4313      	orrs	r3, r2
 8001142:	600b      	str	r3, [r1, #0]
 8001144:	e015      	b.n	8001172 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001146:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <HAL_RCC_OscConfig+0x270>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fc3e 	bl	80009cc <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001154:	f7ff fc3a 	bl	80009cc <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e180      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001166:	4b1d      	ldr	r3, [pc, #116]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b00      	cmp	r3, #0
 800117c:	d03a      	beq.n	80011f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d019      	beq.n	80011ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001186:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <HAL_RCC_OscConfig+0x274>)
 8001188:	2201      	movs	r2, #1
 800118a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118c:	f7ff fc1e 	bl	80009cc <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001194:	f7ff fc1a 	bl	80009cc <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e160      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a6:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 80011a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f000 faea 	bl	800178c <RCC_Delay>
 80011b8:	e01c      	b.n	80011f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ba:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <HAL_RCC_OscConfig+0x274>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c0:	f7ff fc04 	bl	80009cc <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c6:	e00f      	b.n	80011e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c8:	f7ff fc00 	bl	80009cc <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d908      	bls.n	80011e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e146      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000
 80011e0:	42420000 	.word	0x42420000
 80011e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e8:	4b92      	ldr	r3, [pc, #584]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80011ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1e9      	bne.n	80011c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 80a6 	beq.w	800134e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001202:	2300      	movs	r3, #0
 8001204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001206:	4b8b      	ldr	r3, [pc, #556]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10d      	bne.n	800122e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	4b88      	ldr	r3, [pc, #544]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a87      	ldr	r2, [pc, #540]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800121c:	61d3      	str	r3, [r2, #28]
 800121e:	4b85      	ldr	r3, [pc, #532]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800122a:	2301      	movs	r3, #1
 800122c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122e:	4b82      	ldr	r3, [pc, #520]	@ (8001438 <HAL_RCC_OscConfig+0x4c8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001236:	2b00      	cmp	r3, #0
 8001238:	d118      	bne.n	800126c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800123a:	4b7f      	ldr	r3, [pc, #508]	@ (8001438 <HAL_RCC_OscConfig+0x4c8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a7e      	ldr	r2, [pc, #504]	@ (8001438 <HAL_RCC_OscConfig+0x4c8>)
 8001240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001246:	f7ff fbc1 	bl	80009cc <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124e:	f7ff fbbd 	bl	80009cc <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b64      	cmp	r3, #100	@ 0x64
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e103      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001260:	4b75      	ldr	r3, [pc, #468]	@ (8001438 <HAL_RCC_OscConfig+0x4c8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d106      	bne.n	8001282 <HAL_RCC_OscConfig+0x312>
 8001274:	4b6f      	ldr	r3, [pc, #444]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	4a6e      	ldr	r2, [pc, #440]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6213      	str	r3, [r2, #32]
 8001280:	e02d      	b.n	80012de <HAL_RCC_OscConfig+0x36e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x334>
 800128a:	4b6a      	ldr	r3, [pc, #424]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	4a69      	ldr	r2, [pc, #420]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001290:	f023 0301 	bic.w	r3, r3, #1
 8001294:	6213      	str	r3, [r2, #32]
 8001296:	4b67      	ldr	r3, [pc, #412]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	4a66      	ldr	r2, [pc, #408]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 800129c:	f023 0304 	bic.w	r3, r3, #4
 80012a0:	6213      	str	r3, [r2, #32]
 80012a2:	e01c      	b.n	80012de <HAL_RCC_OscConfig+0x36e>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	d10c      	bne.n	80012c6 <HAL_RCC_OscConfig+0x356>
 80012ac:	4b61      	ldr	r3, [pc, #388]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4a60      	ldr	r2, [pc, #384]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	6213      	str	r3, [r2, #32]
 80012b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	4a5d      	ldr	r2, [pc, #372]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6213      	str	r3, [r2, #32]
 80012c4:	e00b      	b.n	80012de <HAL_RCC_OscConfig+0x36e>
 80012c6:	4b5b      	ldr	r3, [pc, #364]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	4a5a      	ldr	r2, [pc, #360]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	f023 0301 	bic.w	r3, r3, #1
 80012d0:	6213      	str	r3, [r2, #32]
 80012d2:	4b58      	ldr	r3, [pc, #352]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	4a57      	ldr	r2, [pc, #348]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	f023 0304 	bic.w	r3, r3, #4
 80012dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d015      	beq.n	8001312 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e6:	f7ff fb71 	bl	80009cc <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ec:	e00a      	b.n	8001304 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ee:	f7ff fb6d 	bl	80009cc <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e0b1      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001304:	4b4b      	ldr	r3, [pc, #300]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0ee      	beq.n	80012ee <HAL_RCC_OscConfig+0x37e>
 8001310:	e014      	b.n	800133c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001312:	f7ff fb5b 	bl	80009cc <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001318:	e00a      	b.n	8001330 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800131a:	f7ff fb57 	bl	80009cc <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001328:	4293      	cmp	r3, r2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e09b      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001330:	4b40      	ldr	r3, [pc, #256]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1ee      	bne.n	800131a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800133c:	7dfb      	ldrb	r3, [r7, #23]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d105      	bne.n	800134e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001342:	4b3c      	ldr	r3, [pc, #240]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a3b      	ldr	r2, [pc, #236]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800134c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8087 	beq.w	8001466 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001358:	4b36      	ldr	r3, [pc, #216]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 030c 	and.w	r3, r3, #12
 8001360:	2b08      	cmp	r3, #8
 8001362:	d061      	beq.n	8001428 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d146      	bne.n	80013fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136c:	4b33      	ldr	r3, [pc, #204]	@ (800143c <HAL_RCC_OscConfig+0x4cc>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001372:	f7ff fb2b 	bl	80009cc <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137a:	f7ff fb27 	bl	80009cc <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e06d      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138c:	4b29      	ldr	r3, [pc, #164]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f0      	bne.n	800137a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013a0:	d108      	bne.n	80013b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013a2:	4b24      	ldr	r3, [pc, #144]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	4921      	ldr	r1, [pc, #132]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a19      	ldr	r1, [r3, #32]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c4:	430b      	orrs	r3, r1
 80013c6:	491b      	ldr	r1, [pc, #108]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013cc:	4b1b      	ldr	r3, [pc, #108]	@ (800143c <HAL_RCC_OscConfig+0x4cc>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d2:	f7ff fafb 	bl	80009cc <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013da:	f7ff faf7 	bl	80009cc <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e03d      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ec:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x46a>
 80013f8:	e035      	b.n	8001466 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013fa:	4b10      	ldr	r3, [pc, #64]	@ (800143c <HAL_RCC_OscConfig+0x4cc>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fae4 	bl	80009cc <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001408:	f7ff fae0 	bl	80009cc <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e026      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141a:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x498>
 8001426:	e01e      	b.n	8001466 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d107      	bne.n	8001440 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e019      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
 8001434:	40021000 	.word	0x40021000
 8001438:	40007000 	.word	0x40007000
 800143c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001440:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <HAL_RCC_OscConfig+0x500>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	429a      	cmp	r2, r3
 8001452:	d106      	bne.n	8001462 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145e:	429a      	cmp	r2, r3
 8001460:	d001      	beq.n	8001466 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000

08001474 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0d0      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001488:	4b6a      	ldr	r3, [pc, #424]	@ (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	429a      	cmp	r2, r3
 8001494:	d910      	bls.n	80014b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001496:	4b67      	ldr	r3, [pc, #412]	@ (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 0207 	bic.w	r2, r3, #7
 800149e:	4965      	ldr	r1, [pc, #404]	@ (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a6:	4b63      	ldr	r3, [pc, #396]	@ (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0b8      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d020      	beq.n	8001506 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d0:	4b59      	ldr	r3, [pc, #356]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4a58      	ldr	r2, [pc, #352]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e8:	4b53      	ldr	r3, [pc, #332]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	4a52      	ldr	r2, [pc, #328]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80014f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f4:	4b50      	ldr	r3, [pc, #320]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	494d      	ldr	r1, [pc, #308]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	4313      	orrs	r3, r2
 8001504:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d040      	beq.n	8001594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d107      	bne.n	800152a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	4b47      	ldr	r3, [pc, #284]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d115      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e07f      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001532:	4b41      	ldr	r3, [pc, #260]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e073      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001542:	4b3d      	ldr	r3, [pc, #244]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e06b      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001552:	4b39      	ldr	r3, [pc, #228]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f023 0203 	bic.w	r2, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4936      	ldr	r1, [pc, #216]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001564:	f7ff fa32 	bl	80009cc <HAL_GetTick>
 8001568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156a:	e00a      	b.n	8001582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156c:	f7ff fa2e 	bl	80009cc <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e053      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001582:	4b2d      	ldr	r3, [pc, #180]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 020c 	and.w	r2, r3, #12
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	429a      	cmp	r2, r3
 8001592:	d1eb      	bne.n	800156c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001594:	4b27      	ldr	r3, [pc, #156]	@ (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d210      	bcs.n	80015c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	4b24      	ldr	r3, [pc, #144]	@ (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 0207 	bic.w	r2, r3, #7
 80015aa:	4922      	ldr	r1, [pc, #136]	@ (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b2:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e032      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d008      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d0:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	4916      	ldr	r1, [pc, #88]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d009      	beq.n	8001602 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ee:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	490e      	ldr	r1, [pc, #56]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001602:	f000 f821 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8001606:	4602      	mov	r2, r0
 8001608:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	490a      	ldr	r1, [pc, #40]	@ (800163c <HAL_RCC_ClockConfig+0x1c8>)
 8001614:	5ccb      	ldrb	r3, [r1, r3]
 8001616:	fa22 f303 	lsr.w	r3, r2, r3
 800161a:	4a09      	ldr	r2, [pc, #36]	@ (8001640 <HAL_RCC_ClockConfig+0x1cc>)
 800161c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800161e:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <HAL_RCC_ClockConfig+0x1d0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff f8dc 	bl	80007e0 <HAL_InitTick>

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40022000 	.word	0x40022000
 8001638:	40021000 	.word	0x40021000
 800163c:	080047d0 	.word	0x080047d0
 8001640:	20000004 	.word	0x20000004
 8001644:	20000008 	.word	0x20000008

08001648 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001648:	b480      	push	{r7}
 800164a:	b087      	sub	sp, #28
 800164c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001662:	4b1e      	ldr	r3, [pc, #120]	@ (80016dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b04      	cmp	r3, #4
 8001670:	d002      	beq.n	8001678 <HAL_RCC_GetSysClockFreq+0x30>
 8001672:	2b08      	cmp	r3, #8
 8001674:	d003      	beq.n	800167e <HAL_RCC_GetSysClockFreq+0x36>
 8001676:	e027      	b.n	80016c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001678:	4b19      	ldr	r3, [pc, #100]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800167a:	613b      	str	r3, [r7, #16]
      break;
 800167c:	e027      	b.n	80016ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	0c9b      	lsrs	r3, r3, #18
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	4a17      	ldr	r2, [pc, #92]	@ (80016e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001688:	5cd3      	ldrb	r3, [r2, r3]
 800168a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d010      	beq.n	80016b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001696:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	0c5b      	lsrs	r3, r3, #17
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	4a11      	ldr	r2, [pc, #68]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016a2:	5cd3      	ldrb	r3, [r2, r3]
 80016a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a0d      	ldr	r2, [pc, #52]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80016aa:	fb03 f202 	mul.w	r2, r3, r2
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	e004      	b.n	80016c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a0c      	ldr	r2, [pc, #48]	@ (80016ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80016bc:	fb02 f303 	mul.w	r3, r2, r3
 80016c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	613b      	str	r3, [r7, #16]
      break;
 80016c6:	e002      	b.n	80016ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80016ca:	613b      	str	r3, [r7, #16]
      break;
 80016cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ce:	693b      	ldr	r3, [r7, #16]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	007a1200 	.word	0x007a1200
 80016e4:	080047e8 	.word	0x080047e8
 80016e8:	080047f8 	.word	0x080047f8
 80016ec:	003d0900 	.word	0x003d0900

080016f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016f4:	4b02      	ldr	r3, [pc, #8]	@ (8001700 <HAL_RCC_GetHCLKFreq+0x10>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	20000004 	.word	0x20000004

08001704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001708:	f7ff fff2 	bl	80016f0 <HAL_RCC_GetHCLKFreq>
 800170c:	4602      	mov	r2, r0
 800170e:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	0a1b      	lsrs	r3, r3, #8
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	4903      	ldr	r1, [pc, #12]	@ (8001728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800171a:	5ccb      	ldrb	r3, [r1, r3]
 800171c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001720:	4618      	mov	r0, r3
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40021000 	.word	0x40021000
 8001728:	080047e0 	.word	0x080047e0

0800172c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	220f      	movs	r2, #15
 800173a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800173c:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <HAL_RCC_GetClockConfig+0x58>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0203 	and.w	r2, r3, #3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001748:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <HAL_RCC_GetClockConfig+0x58>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001754:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <HAL_RCC_GetClockConfig+0x58>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001760:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <HAL_RCC_GetClockConfig+0x58>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	08db      	lsrs	r3, r3, #3
 8001766:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800176e:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_RCC_GetClockConfig+0x5c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0207 	and.w	r2, r3, #7
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	40021000 	.word	0x40021000
 8001788:	40022000 	.word	0x40022000

0800178c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001794:	4b0a      	ldr	r3, [pc, #40]	@ (80017c0 <RCC_Delay+0x34>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0a      	ldr	r2, [pc, #40]	@ (80017c4 <RCC_Delay+0x38>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	0a5b      	lsrs	r3, r3, #9
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	fb02 f303 	mul.w	r3, r2, r3
 80017a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017a8:	bf00      	nop
  }
  while (Delay --);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1e5a      	subs	r2, r3, #1
 80017ae:	60fa      	str	r2, [r7, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f9      	bne.n	80017a8 <RCC_Delay+0x1c>
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	20000004 	.word	0x20000004
 80017c4:	10624dd3 	.word	0x10624dd3

080017c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e041      	b.n	800185e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d106      	bne.n	80017f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f839 	bl	8001866 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2202      	movs	r2, #2
 80017f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3304      	adds	r3, #4
 8001804:	4619      	mov	r1, r3
 8001806:	4610      	mov	r0, r2
 8001808:	f000 f9c2 	bl	8001b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b01      	cmp	r3, #1
 800188a:	d001      	beq.n	8001890 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e044      	b.n	800191a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2202      	movs	r2, #2
 8001894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0201 	orr.w	r2, r2, #1
 80018a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001924 <HAL_TIM_Base_Start_IT+0xac>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d018      	beq.n	80018e4 <HAL_TIM_Base_Start_IT+0x6c>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001928 <HAL_TIM_Base_Start_IT+0xb0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d013      	beq.n	80018e4 <HAL_TIM_Base_Start_IT+0x6c>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018c4:	d00e      	beq.n	80018e4 <HAL_TIM_Base_Start_IT+0x6c>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a18      	ldr	r2, [pc, #96]	@ (800192c <HAL_TIM_Base_Start_IT+0xb4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d009      	beq.n	80018e4 <HAL_TIM_Base_Start_IT+0x6c>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a16      	ldr	r2, [pc, #88]	@ (8001930 <HAL_TIM_Base_Start_IT+0xb8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d004      	beq.n	80018e4 <HAL_TIM_Base_Start_IT+0x6c>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a15      	ldr	r2, [pc, #84]	@ (8001934 <HAL_TIM_Base_Start_IT+0xbc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d111      	bne.n	8001908 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2b06      	cmp	r3, #6
 80018f4:	d010      	beq.n	8001918 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f042 0201 	orr.w	r2, r2, #1
 8001904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001906:	e007      	b.n	8001918 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0201 	orr.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	40012c00 	.word	0x40012c00
 8001928:	40013400 	.word	0x40013400
 800192c:	40000400 	.word	0x40000400
 8001930:	40000800 	.word	0x40000800
 8001934:	40000c00 	.word	0x40000c00

08001938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b02      	cmp	r3, #2
 800194c:	d122      	bne.n	8001994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b02      	cmp	r3, #2
 800195a:	d11b      	bne.n	8001994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f06f 0202 	mvn.w	r2, #2
 8001964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f8ed 	bl	8001b5a <HAL_TIM_IC_CaptureCallback>
 8001980:	e005      	b.n	800198e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f8e0 	bl	8001b48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f8ef 	bl	8001b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d122      	bne.n	80019e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d11b      	bne.n	80019e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f06f 0204 	mvn.w	r2, #4
 80019b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2202      	movs	r2, #2
 80019be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f8c3 	bl	8001b5a <HAL_TIM_IC_CaptureCallback>
 80019d4:	e005      	b.n	80019e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f8b6 	bl	8001b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f8c5 	bl	8001b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d122      	bne.n	8001a3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d11b      	bne.n	8001a3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f06f 0208 	mvn.w	r2, #8
 8001a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2204      	movs	r2, #4
 8001a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f899 	bl	8001b5a <HAL_TIM_IC_CaptureCallback>
 8001a28:	e005      	b.n	8001a36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f88c 	bl	8001b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f89b 	bl	8001b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	f003 0310 	and.w	r3, r3, #16
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	d122      	bne.n	8001a90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	f003 0310 	and.w	r3, r3, #16
 8001a54:	2b10      	cmp	r3, #16
 8001a56:	d11b      	bne.n	8001a90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f06f 0210 	mvn.w	r2, #16
 8001a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2208      	movs	r2, #8
 8001a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f86f 	bl	8001b5a <HAL_TIM_IC_CaptureCallback>
 8001a7c:	e005      	b.n	8001a8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f862 	bl	8001b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f871 	bl	8001b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d10e      	bne.n	8001abc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d107      	bne.n	8001abc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f06f 0201 	mvn.w	r2, #1
 8001ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7fe fe42 	bl	8000740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ac6:	2b80      	cmp	r3, #128	@ 0x80
 8001ac8:	d10e      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ad4:	2b80      	cmp	r3, #128	@ 0x80
 8001ad6:	d107      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f8d7 	bl	8001c96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001af2:	2b40      	cmp	r3, #64	@ 0x40
 8001af4:	d10e      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b00:	2b40      	cmp	r3, #64	@ 0x40
 8001b02:	d107      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f835 	bl	8001b7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	f003 0320 	and.w	r3, r3, #32
 8001b1e:	2b20      	cmp	r3, #32
 8001b20:	d10e      	bne.n	8001b40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 0320 	and.w	r3, r3, #32
 8001b2c:	2b20      	cmp	r3, #32
 8001b2e:	d107      	bne.n	8001b40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f06f 0220 	mvn.w	r2, #32
 8001b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f8a2 	bl	8001c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a33      	ldr	r2, [pc, #204]	@ (8001c70 <TIM_Base_SetConfig+0xe0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d013      	beq.n	8001bd0 <TIM_Base_SetConfig+0x40>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a32      	ldr	r2, [pc, #200]	@ (8001c74 <TIM_Base_SetConfig+0xe4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d00f      	beq.n	8001bd0 <TIM_Base_SetConfig+0x40>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bb6:	d00b      	beq.n	8001bd0 <TIM_Base_SetConfig+0x40>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a2f      	ldr	r2, [pc, #188]	@ (8001c78 <TIM_Base_SetConfig+0xe8>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d007      	beq.n	8001bd0 <TIM_Base_SetConfig+0x40>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a2e      	ldr	r2, [pc, #184]	@ (8001c7c <TIM_Base_SetConfig+0xec>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d003      	beq.n	8001bd0 <TIM_Base_SetConfig+0x40>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a2d      	ldr	r2, [pc, #180]	@ (8001c80 <TIM_Base_SetConfig+0xf0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d108      	bne.n	8001be2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a22      	ldr	r2, [pc, #136]	@ (8001c70 <TIM_Base_SetConfig+0xe0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d013      	beq.n	8001c12 <TIM_Base_SetConfig+0x82>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a21      	ldr	r2, [pc, #132]	@ (8001c74 <TIM_Base_SetConfig+0xe4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00f      	beq.n	8001c12 <TIM_Base_SetConfig+0x82>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bf8:	d00b      	beq.n	8001c12 <TIM_Base_SetConfig+0x82>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8001c78 <TIM_Base_SetConfig+0xe8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d007      	beq.n	8001c12 <TIM_Base_SetConfig+0x82>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a1d      	ldr	r2, [pc, #116]	@ (8001c7c <TIM_Base_SetConfig+0xec>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d003      	beq.n	8001c12 <TIM_Base_SetConfig+0x82>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001c80 <TIM_Base_SetConfig+0xf0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d108      	bne.n	8001c24 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a09      	ldr	r2, [pc, #36]	@ (8001c70 <TIM_Base_SetConfig+0xe0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d003      	beq.n	8001c58 <TIM_Base_SetConfig+0xc8>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a08      	ldr	r2, [pc, #32]	@ (8001c74 <TIM_Base_SetConfig+0xe4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d103      	bne.n	8001c60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	615a      	str	r2, [r3, #20]
}
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	40012c00 	.word	0x40012c00
 8001c74:	40013400 	.word	0x40013400
 8001c78:	40000400 	.word	0x40000400
 8001c7c:	40000800 	.word	0x40000800
 8001c80:	40000c00 	.word	0x40000c00

08001c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001cae:	f3ef 8305 	mrs	r3, IPSR
 8001cb2:	60bb      	str	r3, [r7, #8]
  return(result);
 8001cb4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10f      	bne.n	8001cda <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cba:	f3ef 8310 	mrs	r3, PRIMASK
 8001cbe:	607b      	str	r3, [r7, #4]
  return(result);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <osKernelInitialize+0x32>
 8001cc6:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <osKernelInitialize+0x60>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d109      	bne.n	8001ce2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001cce:	f3ef 8311 	mrs	r3, BASEPRI
 8001cd2:	603b      	str	r3, [r7, #0]
  return(result);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001cda:	f06f 0305 	mvn.w	r3, #5
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	e00c      	b.n	8001cfc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001ce2:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <osKernelInitialize+0x60>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d105      	bne.n	8001cf6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001cea:	4b07      	ldr	r3, [pc, #28]	@ (8001d08 <osKernelInitialize+0x60>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	e002      	b.n	8001cfc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	20000088 	.word	0x20000088

08001d0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d12:	f3ef 8305 	mrs	r3, IPSR
 8001d16:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10f      	bne.n	8001d3e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8001d22:	607b      	str	r3, [r7, #4]
  return(result);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d109      	bne.n	8001d3e <osKernelStart+0x32>
 8001d2a:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <osKernelStart+0x64>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d109      	bne.n	8001d46 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001d32:	f3ef 8311 	mrs	r3, BASEPRI
 8001d36:	603b      	str	r3, [r7, #0]
  return(result);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001d3e:	f06f 0305 	mvn.w	r3, #5
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	e00e      	b.n	8001d64 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001d46:	4b0a      	ldr	r3, [pc, #40]	@ (8001d70 <osKernelStart+0x64>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d107      	bne.n	8001d5e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <osKernelStart+0x64>)
 8001d50:	2202      	movs	r2, #2
 8001d52:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001d54:	f001 f890 	bl	8002e78 <vTaskStartScheduler>
      stat = osOK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	e002      	b.n	8001d64 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001d64:	68fb      	ldr	r3, [r7, #12]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000088 	.word	0x20000088

08001d74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b092      	sub	sp, #72	@ 0x48
 8001d78:	af04      	add	r7, sp, #16
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d84:	f3ef 8305 	mrs	r3, IPSR
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f040 8094 	bne.w	8001eba <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d92:	f3ef 8310 	mrs	r3, PRIMASK
 8001d96:	623b      	str	r3, [r7, #32]
  return(result);
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f040 808d 	bne.w	8001eba <osThreadNew+0x146>
 8001da0:	4b48      	ldr	r3, [pc, #288]	@ (8001ec4 <osThreadNew+0x150>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d106      	bne.n	8001db6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001da8:	f3ef 8311 	mrs	r3, BASEPRI
 8001dac:	61fb      	str	r3, [r7, #28]
  return(result);
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f040 8082 	bne.w	8001eba <osThreadNew+0x146>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d07e      	beq.n	8001eba <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001dbc:	2380      	movs	r3, #128	@ 0x80
 8001dbe:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001dc0:	2318      	movs	r3, #24
 8001dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001dc8:	f107 031b 	add.w	r3, r7, #27
 8001dcc:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd2:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d045      	beq.n	8001e66 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <osThreadNew+0x74>
        name = attr->name;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d008      	beq.n	8001e0e <osThreadNew+0x9a>
 8001dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dfe:	2b38      	cmp	r3, #56	@ 0x38
 8001e00:	d805      	bhi.n	8001e0e <osThreadNew+0x9a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <osThreadNew+0x9e>
        return (NULL);
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e054      	b.n	8001ebc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00e      	beq.n	8001e48 <osThreadNew+0xd4>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2b5b      	cmp	r3, #91	@ 0x5b
 8001e30:	d90a      	bls.n	8001e48 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d006      	beq.n	8001e48 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <osThreadNew+0xd4>
        mem = 1;
 8001e42:	2301      	movs	r3, #1
 8001e44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e46:	e010      	b.n	8001e6a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10c      	bne.n	8001e6a <osThreadNew+0xf6>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d108      	bne.n	8001e6a <osThreadNew+0xf6>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d104      	bne.n	8001e6a <osThreadNew+0xf6>
          mem = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e64:	e001      	b.n	8001e6a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8001e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d110      	bne.n	8001e92 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001e78:	9202      	str	r2, [sp, #8]
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e84:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 fe24 	bl	8002ad4 <xTaskCreateStatic>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	e013      	b.n	8001eba <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d110      	bne.n	8001eba <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 fe71 	bl	8002b92 <xTaskCreate>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d001      	beq.n	8001eba <osThreadNew+0x146>
          hTask = NULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001eba:	697b      	ldr	r3, [r7, #20]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3738      	adds	r7, #56	@ 0x38
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000088 	.word	0x20000088

08001ec8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ed0:	f3ef 8305 	mrs	r3, IPSR
 8001ed4:	613b      	str	r3, [r7, #16]
  return(result);
 8001ed6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10f      	bne.n	8001efc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001edc:	f3ef 8310 	mrs	r3, PRIMASK
 8001ee0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d109      	bne.n	8001efc <osDelay+0x34>
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <osDelay+0x58>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d109      	bne.n	8001f04 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ef0:	f3ef 8311 	mrs	r3, BASEPRI
 8001ef4:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <osDelay+0x3c>
    stat = osErrorISR;
 8001efc:	f06f 0305 	mvn.w	r3, #5
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	e007      	b.n	8001f14 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d002      	beq.n	8001f14 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 ff7c 	bl	8002e0c <vTaskDelay>
    }
  }

  return (stat);
 8001f14:	697b      	ldr	r3, [r7, #20]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000088 	.word	0x20000088

08001f24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4a06      	ldr	r2, [pc, #24]	@ (8001f4c <vApplicationGetIdleTaskMemory+0x28>)
 8001f34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	4a05      	ldr	r2, [pc, #20]	@ (8001f50 <vApplicationGetIdleTaskMemory+0x2c>)
 8001f3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2280      	movs	r2, #128	@ 0x80
 8001f40:	601a      	str	r2, [r3, #0]
}
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	2000008c 	.word	0x2000008c
 8001f50:	200000e8 	.word	0x200000e8

08001f54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4a07      	ldr	r2, [pc, #28]	@ (8001f80 <vApplicationGetTimerTaskMemory+0x2c>)
 8001f64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	4a06      	ldr	r2, [pc, #24]	@ (8001f84 <vApplicationGetTimerTaskMemory+0x30>)
 8001f6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f72:	601a      	str	r2, [r3, #0]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	200002e8 	.word	0x200002e8
 8001f84:	20000344 	.word	0x20000344

08001f88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f103 0208 	add.w	r2, r3, #8
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f103 0208 	add.w	r2, r3, #8
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f103 0208 	add.w	r2, r3, #8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr

08001fc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b085      	sub	sp, #20
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	601a      	str	r2, [r3, #0]
}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203a:	d103      	bne.n	8002044 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	e00c      	b.n	800205e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3308      	adds	r3, #8
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	e002      	b.n	8002052 <vListInsert+0x2e>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	429a      	cmp	r2, r3
 800205c:	d2f6      	bcs.n	800204c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	601a      	str	r2, [r3, #0]
}
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6892      	ldr	r2, [r2, #8]
 80020aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6852      	ldr	r2, [r2, #4]
 80020b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d103      	bne.n	80020c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	1e5a      	subs	r2, r3, #1
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr
	...

080020e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10b      	bne.n	8002114 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002100:	f383 8811 	msr	BASEPRI, r3
 8002104:	f3bf 8f6f 	isb	sy
 8002108:	f3bf 8f4f 	dsb	sy
 800210c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800210e:	bf00      	nop
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002114:	f001 fffa 	bl	800410c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002120:	68f9      	ldr	r1, [r7, #12]
 8002122:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	441a      	add	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002144:	3b01      	subs	r3, #1
 8002146:	68f9      	ldr	r1, [r7, #12]
 8002148:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	441a      	add	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	22ff      	movs	r2, #255	@ 0xff
 8002158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	22ff      	movs	r2, #255	@ 0xff
 8002160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d114      	bne.n	8002194 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d01a      	beq.n	80021a8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	3310      	adds	r3, #16
 8002176:	4618      	mov	r0, r3
 8002178:	f001 f910 	bl	800339c <xTaskRemoveFromEventList>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d012      	beq.n	80021a8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002182:	4b0d      	ldr	r3, [pc, #52]	@ (80021b8 <xQueueGenericReset+0xd0>)
 8002184:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	f3bf 8f4f 	dsb	sy
 800218e:	f3bf 8f6f 	isb	sy
 8002192:	e009      	b.n	80021a8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3310      	adds	r3, #16
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fef5 	bl	8001f88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3324      	adds	r3, #36	@ 0x24
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fef0 	bl	8001f88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80021a8:	f001 ffe0 	bl	800416c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80021ac:	2301      	movs	r3, #1
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	e000ed04 	.word	0xe000ed04

080021bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08e      	sub	sp, #56	@ 0x38
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10b      	bne.n	80021e8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80021d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021d4:	f383 8811 	msr	BASEPRI, r3
 80021d8:	f3bf 8f6f 	isb	sy
 80021dc:	f3bf 8f4f 	dsb	sy
 80021e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80021e2:	bf00      	nop
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10b      	bne.n	8002206 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80021ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021f2:	f383 8811 	msr	BASEPRI, r3
 80021f6:	f3bf 8f6f 	isb	sy
 80021fa:	f3bf 8f4f 	dsb	sy
 80021fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	e7fd      	b.n	8002202 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <xQueueGenericCreateStatic+0x56>
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <xQueueGenericCreateStatic+0x5a>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <xQueueGenericCreateStatic+0x5c>
 8002216:	2300      	movs	r3, #0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10b      	bne.n	8002234 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800221c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002220:	f383 8811 	msr	BASEPRI, r3
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	f3bf 8f4f 	dsb	sy
 800222c:	623b      	str	r3, [r7, #32]
}
 800222e:	bf00      	nop
 8002230:	bf00      	nop
 8002232:	e7fd      	b.n	8002230 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d102      	bne.n	8002240 <xQueueGenericCreateStatic+0x84>
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <xQueueGenericCreateStatic+0x88>
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <xQueueGenericCreateStatic+0x8a>
 8002244:	2300      	movs	r3, #0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10b      	bne.n	8002262 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800224a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800224e:	f383 8811 	msr	BASEPRI, r3
 8002252:	f3bf 8f6f 	isb	sy
 8002256:	f3bf 8f4f 	dsb	sy
 800225a:	61fb      	str	r3, [r7, #28]
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	e7fd      	b.n	800225e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002262:	2350      	movs	r3, #80	@ 0x50
 8002264:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2b50      	cmp	r3, #80	@ 0x50
 800226a:	d00b      	beq.n	8002284 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800226c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002270:	f383 8811 	msr	BASEPRI, r3
 8002274:	f3bf 8f6f 	isb	sy
 8002278:	f3bf 8f4f 	dsb	sy
 800227c:	61bb      	str	r3, [r7, #24]
}
 800227e:	bf00      	nop
 8002280:	bf00      	nop
 8002282:	e7fd      	b.n	8002280 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00d      	beq.n	80022aa <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800228e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002296:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800229a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	4613      	mov	r3, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f805 	bl	80022b4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80022aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3730      	adds	r7, #48	@ 0x30
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d103      	bne.n	80022d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	e002      	b.n	80022d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80022e2:	2101      	movs	r1, #1
 80022e4:	69b8      	ldr	r0, [r7, #24]
 80022e6:	f7ff feff 	bl	80020e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08e      	sub	sp, #56	@ 0x38
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800230a:	2300      	movs	r3, #0
 800230c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10b      	bne.n	8002330 <xQueueGenericSend+0x34>
	__asm volatile
 8002318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800231c:	f383 8811 	msr	BASEPRI, r3
 8002320:	f3bf 8f6f 	isb	sy
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800232a:	bf00      	nop
 800232c:	bf00      	nop
 800232e:	e7fd      	b.n	800232c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d103      	bne.n	800233e <xQueueGenericSend+0x42>
 8002336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <xQueueGenericSend+0x46>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <xQueueGenericSend+0x48>
 8002342:	2300      	movs	r3, #0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10b      	bne.n	8002360 <xQueueGenericSend+0x64>
	__asm volatile
 8002348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800234c:	f383 8811 	msr	BASEPRI, r3
 8002350:	f3bf 8f6f 	isb	sy
 8002354:	f3bf 8f4f 	dsb	sy
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800235a:	bf00      	nop
 800235c:	bf00      	nop
 800235e:	e7fd      	b.n	800235c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d103      	bne.n	800236e <xQueueGenericSend+0x72>
 8002366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <xQueueGenericSend+0x76>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <xQueueGenericSend+0x78>
 8002372:	2300      	movs	r3, #0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10b      	bne.n	8002390 <xQueueGenericSend+0x94>
	__asm volatile
 8002378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800237c:	f383 8811 	msr	BASEPRI, r3
 8002380:	f3bf 8f6f 	isb	sy
 8002384:	f3bf 8f4f 	dsb	sy
 8002388:	623b      	str	r3, [r7, #32]
}
 800238a:	bf00      	nop
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002390:	f001 f9c8 	bl	8003724 <xTaskGetSchedulerState>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <xQueueGenericSend+0xa4>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <xQueueGenericSend+0xa8>
 80023a0:	2301      	movs	r3, #1
 80023a2:	e000      	b.n	80023a6 <xQueueGenericSend+0xaa>
 80023a4:	2300      	movs	r3, #0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10b      	bne.n	80023c2 <xQueueGenericSend+0xc6>
	__asm volatile
 80023aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ae:	f383 8811 	msr	BASEPRI, r3
 80023b2:	f3bf 8f6f 	isb	sy
 80023b6:	f3bf 8f4f 	dsb	sy
 80023ba:	61fb      	str	r3, [r7, #28]
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	e7fd      	b.n	80023be <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80023c2:	f001 fea3 	bl	800410c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80023c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d302      	bcc.n	80023d8 <xQueueGenericSend+0xdc>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d129      	bne.n	800242c <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023de:	f000 fa0d 	bl	80027fc <prvCopyDataToQueue>
 80023e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d010      	beq.n	800240e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ee:	3324      	adds	r3, #36	@ 0x24
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 ffd3 	bl	800339c <xTaskRemoveFromEventList>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d013      	beq.n	8002424 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80023fc:	4b3f      	ldr	r3, [pc, #252]	@ (80024fc <xQueueGenericSend+0x200>)
 80023fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	f3bf 8f6f 	isb	sy
 800240c:	e00a      	b.n	8002424 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800240e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002410:	2b00      	cmp	r3, #0
 8002412:	d007      	beq.n	8002424 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002414:	4b39      	ldr	r3, [pc, #228]	@ (80024fc <xQueueGenericSend+0x200>)
 8002416:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	f3bf 8f4f 	dsb	sy
 8002420:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002424:	f001 fea2 	bl	800416c <vPortExitCritical>
				return pdPASS;
 8002428:	2301      	movs	r3, #1
 800242a:	e063      	b.n	80024f4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d103      	bne.n	800243a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002432:	f001 fe9b 	bl	800416c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002436:	2300      	movs	r3, #0
 8002438:	e05c      	b.n	80024f4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800243a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800243c:	2b00      	cmp	r3, #0
 800243e:	d106      	bne.n	800244e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	4618      	mov	r0, r3
 8002446:	f001 f80d 	bl	8003464 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800244a:	2301      	movs	r3, #1
 800244c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800244e:	f001 fe8d 	bl	800416c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002452:	f000 fd79 	bl	8002f48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002456:	f001 fe59 	bl	800410c <vPortEnterCritical>
 800245a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002460:	b25b      	sxtb	r3, r3
 8002462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002466:	d103      	bne.n	8002470 <xQueueGenericSend+0x174>
 8002468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002472:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002476:	b25b      	sxtb	r3, r3
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247c:	d103      	bne.n	8002486 <xQueueGenericSend+0x18a>
 800247e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002486:	f001 fe71 	bl	800416c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800248a:	1d3a      	adds	r2, r7, #4
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fffc 	bl	8003490 <xTaskCheckForTimeOut>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d124      	bne.n	80024e8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800249e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024a0:	f000 faa4 	bl	80029ec <prvIsQueueFull>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d018      	beq.n	80024dc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80024aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ac:	3310      	adds	r3, #16
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	4611      	mov	r1, r2
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 ff20 	bl	80032f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80024b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024ba:	f000 fa2f 	bl	800291c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80024be:	f000 fd51 	bl	8002f64 <xTaskResumeAll>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f47f af7c 	bne.w	80023c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80024ca:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <xQueueGenericSend+0x200>)
 80024cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	f3bf 8f4f 	dsb	sy
 80024d6:	f3bf 8f6f 	isb	sy
 80024da:	e772      	b.n	80023c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80024dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024de:	f000 fa1d 	bl	800291c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80024e2:	f000 fd3f 	bl	8002f64 <xTaskResumeAll>
 80024e6:	e76c      	b.n	80023c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80024e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024ea:	f000 fa17 	bl	800291c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80024ee:	f000 fd39 	bl	8002f64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80024f2:	2300      	movs	r3, #0
		}
	}
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3738      	adds	r7, #56	@ 0x38
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	e000ed04 	.word	0xe000ed04

08002500 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08e      	sub	sp, #56	@ 0x38
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10b      	bne.n	8002530 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800252a:	bf00      	nop
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d103      	bne.n	800253e <xQueueGenericSendFromISR+0x3e>
 8002536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <xQueueGenericSendFromISR+0x42>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <xQueueGenericSendFromISR+0x44>
 8002542:	2300      	movs	r3, #0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10b      	bne.n	8002560 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800254c:	f383 8811 	msr	BASEPRI, r3
 8002550:	f3bf 8f6f 	isb	sy
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	623b      	str	r3, [r7, #32]
}
 800255a:	bf00      	nop
 800255c:	bf00      	nop
 800255e:	e7fd      	b.n	800255c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d103      	bne.n	800256e <xQueueGenericSendFromISR+0x6e>
 8002566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <xQueueGenericSendFromISR+0x72>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <xQueueGenericSendFromISR+0x74>
 8002572:	2300      	movs	r3, #0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10b      	bne.n	8002590 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800257c:	f383 8811 	msr	BASEPRI, r3
 8002580:	f3bf 8f6f 	isb	sy
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	61fb      	str	r3, [r7, #28]
}
 800258a:	bf00      	nop
 800258c:	bf00      	nop
 800258e:	e7fd      	b.n	800258c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002590:	f001 fe7e 	bl	8004290 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002594:	f3ef 8211 	mrs	r2, BASEPRI
 8002598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800259c:	f383 8811 	msr	BASEPRI, r3
 80025a0:	f3bf 8f6f 	isb	sy
 80025a4:	f3bf 8f4f 	dsb	sy
 80025a8:	61ba      	str	r2, [r7, #24]
 80025aa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80025ac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80025ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d302      	bcc.n	80025c2 <xQueueGenericSendFromISR+0xc2>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d12c      	bne.n	800261c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80025c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	68b9      	ldr	r1, [r7, #8]
 80025d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025d2:	f000 f913 	bl	80027fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80025d6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80025da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025de:	d112      	bne.n	8002606 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d016      	beq.n	8002616 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ea:	3324      	adds	r3, #36	@ 0x24
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 fed5 	bl	800339c <xTaskRemoveFromEventList>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00e      	beq.n	8002616 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00b      	beq.n	8002616 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	e007      	b.n	8002616 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002606:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800260a:	3301      	adds	r3, #1
 800260c:	b2db      	uxtb	r3, r3
 800260e:	b25a      	sxtb	r2, r3
 8002610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002612:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002616:	2301      	movs	r3, #1
 8002618:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800261a:	e001      	b.n	8002620 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800261c:	2300      	movs	r3, #0
 800261e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002622:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800262a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800262c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800262e:	4618      	mov	r0, r3
 8002630:	3738      	adds	r7, #56	@ 0x38
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08c      	sub	sp, #48	@ 0x30
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002644:	2300      	movs	r3, #0
 8002646:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800264c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10b      	bne.n	800266a <xQueueReceive+0x32>
	__asm volatile
 8002652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002656:	f383 8811 	msr	BASEPRI, r3
 800265a:	f3bf 8f6f 	isb	sy
 800265e:	f3bf 8f4f 	dsb	sy
 8002662:	623b      	str	r3, [r7, #32]
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	e7fd      	b.n	8002666 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d103      	bne.n	8002678 <xQueueReceive+0x40>
 8002670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <xQueueReceive+0x44>
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <xQueueReceive+0x46>
 800267c:	2300      	movs	r3, #0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10b      	bne.n	800269a <xQueueReceive+0x62>
	__asm volatile
 8002682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002686:	f383 8811 	msr	BASEPRI, r3
 800268a:	f3bf 8f6f 	isb	sy
 800268e:	f3bf 8f4f 	dsb	sy
 8002692:	61fb      	str	r3, [r7, #28]
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	e7fd      	b.n	8002696 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800269a:	f001 f843 	bl	8003724 <xTaskGetSchedulerState>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <xQueueReceive+0x72>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <xQueueReceive+0x76>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <xQueueReceive+0x78>
 80026ae:	2300      	movs	r3, #0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10b      	bne.n	80026cc <xQueueReceive+0x94>
	__asm volatile
 80026b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026b8:	f383 8811 	msr	BASEPRI, r3
 80026bc:	f3bf 8f6f 	isb	sy
 80026c0:	f3bf 8f4f 	dsb	sy
 80026c4:	61bb      	str	r3, [r7, #24]
}
 80026c6:	bf00      	nop
 80026c8:	bf00      	nop
 80026ca:	e7fd      	b.n	80026c8 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80026cc:	f001 fd1e 	bl	800410c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01f      	beq.n	800271c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026e0:	f000 f8f6 	bl	80028d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	1e5a      	subs	r2, r3, #1
 80026e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00f      	beq.n	8002714 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f6:	3310      	adds	r3, #16
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fe4f 	bl	800339c <xTaskRemoveFromEventList>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d007      	beq.n	8002714 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002704:	4b3c      	ldr	r3, [pc, #240]	@ (80027f8 <xQueueReceive+0x1c0>)
 8002706:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002714:	f001 fd2a 	bl	800416c <vPortExitCritical>
				return pdPASS;
 8002718:	2301      	movs	r3, #1
 800271a:	e069      	b.n	80027f0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d103      	bne.n	800272a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002722:	f001 fd23 	bl	800416c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002726:	2300      	movs	r3, #0
 8002728:	e062      	b.n	80027f0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800272a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d106      	bne.n	800273e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002730:	f107 0310 	add.w	r3, r7, #16
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fe95 	bl	8003464 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800273a:	2301      	movs	r3, #1
 800273c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800273e:	f001 fd15 	bl	800416c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002742:	f000 fc01 	bl	8002f48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002746:	f001 fce1 	bl	800410c <vPortEnterCritical>
 800274a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800274c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002750:	b25b      	sxtb	r3, r3
 8002752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002756:	d103      	bne.n	8002760 <xQueueReceive+0x128>
 8002758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002762:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002766:	b25b      	sxtb	r3, r3
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d103      	bne.n	8002776 <xQueueReceive+0x13e>
 800276e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002776:	f001 fcf9 	bl	800416c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800277a:	1d3a      	adds	r2, r7, #4
 800277c:	f107 0310 	add.w	r3, r7, #16
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f000 fe84 	bl	8003490 <xTaskCheckForTimeOut>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d123      	bne.n	80027d6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800278e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002790:	f000 f916 	bl	80029c0 <prvIsQueueEmpty>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d017      	beq.n	80027ca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800279a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800279c:	3324      	adds	r3, #36	@ 0x24
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fda8 	bl	80032f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80027a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027aa:	f000 f8b7 	bl	800291c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80027ae:	f000 fbd9 	bl	8002f64 <xTaskResumeAll>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d189      	bne.n	80026cc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80027b8:	4b0f      	ldr	r3, [pc, #60]	@ (80027f8 <xQueueReceive+0x1c0>)
 80027ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	f3bf 8f4f 	dsb	sy
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	e780      	b.n	80026cc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80027ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027cc:	f000 f8a6 	bl	800291c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027d0:	f000 fbc8 	bl	8002f64 <xTaskResumeAll>
 80027d4:	e77a      	b.n	80026cc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80027d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027d8:	f000 f8a0 	bl	800291c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027dc:	f000 fbc2 	bl	8002f64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027e2:	f000 f8ed 	bl	80029c0 <prvIsQueueEmpty>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f43f af6f 	beq.w	80026cc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80027ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3730      	adds	r7, #48	@ 0x30
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	e000ed04 	.word	0xe000ed04

080027fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002810:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10d      	bne.n	8002836 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d14d      	bne.n	80028be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4618      	mov	r0, r3
 8002828:	f000 ff9a 	bl	8003760 <xTaskPriorityDisinherit>
 800282c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	605a      	str	r2, [r3, #4]
 8002834:	e043      	b.n	80028be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d119      	bne.n	8002870 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6898      	ldr	r0, [r3, #8]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002844:	461a      	mov	r2, r3
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	f001 ff6c 	bl	8004724 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002854:	441a      	add	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	429a      	cmp	r2, r3
 8002864:	d32b      	bcc.n	80028be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	e026      	b.n	80028be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	68d8      	ldr	r0, [r3, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002878:	461a      	mov	r2, r3
 800287a:	68b9      	ldr	r1, [r7, #8]
 800287c:	f001 ff52 	bl	8004724 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	425b      	negs	r3, r3
 800288a:	441a      	add	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d207      	bcs.n	80028ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	425b      	negs	r3, r3
 80028a6:	441a      	add	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d105      	bne.n	80028be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80028c6:	697b      	ldr	r3, [r7, #20]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d018      	beq.n	8002914 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	441a      	add	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d303      	bcc.n	8002904 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68d9      	ldr	r1, [r3, #12]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290c:	461a      	mov	r2, r3
 800290e:	6838      	ldr	r0, [r7, #0]
 8002910:	f001 ff08 	bl	8004724 <memcpy>
	}
}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002924:	f001 fbf2 	bl	800410c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800292e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002930:	e011      	b.n	8002956 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002936:	2b00      	cmp	r3, #0
 8002938:	d012      	beq.n	8002960 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3324      	adds	r3, #36	@ 0x24
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fd2c 	bl	800339c <xTaskRemoveFromEventList>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800294a:	f000 fe05 	bl	8003558 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	3b01      	subs	r3, #1
 8002952:	b2db      	uxtb	r3, r3
 8002954:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295a:	2b00      	cmp	r3, #0
 800295c:	dce9      	bgt.n	8002932 <prvUnlockQueue+0x16>
 800295e:	e000      	b.n	8002962 <prvUnlockQueue+0x46>
					break;
 8002960:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	22ff      	movs	r2, #255	@ 0xff
 8002966:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800296a:	f001 fbff 	bl	800416c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800296e:	f001 fbcd 	bl	800410c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002978:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800297a:	e011      	b.n	80029a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d012      	beq.n	80029aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3310      	adds	r3, #16
 8002988:	4618      	mov	r0, r3
 800298a:	f000 fd07 	bl	800339c <xTaskRemoveFromEventList>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002994:	f000 fde0 	bl	8003558 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002998:	7bbb      	ldrb	r3, [r7, #14]
 800299a:	3b01      	subs	r3, #1
 800299c:	b2db      	uxtb	r3, r3
 800299e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80029a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	dce9      	bgt.n	800297c <prvUnlockQueue+0x60>
 80029a8:	e000      	b.n	80029ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80029aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	22ff      	movs	r2, #255	@ 0xff
 80029b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80029b4:	f001 fbda 	bl	800416c <vPortExitCritical>
}
 80029b8:	bf00      	nop
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80029c8:	f001 fba0 	bl	800410c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d102      	bne.n	80029da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80029d4:	2301      	movs	r3, #1
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	e001      	b.n	80029de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80029de:	f001 fbc5 	bl	800416c <vPortExitCritical>

	return xReturn;
 80029e2:	68fb      	ldr	r3, [r7, #12]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80029f4:	f001 fb8a 	bl	800410c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d102      	bne.n	8002a0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002a04:	2301      	movs	r3, #1
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e001      	b.n	8002a0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a0e:	f001 fbad 	bl	800416c <vPortExitCritical>

	return xReturn;
 8002a12:	68fb      	ldr	r3, [r7, #12]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	e014      	b.n	8002a56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8002a68 <vQueueAddToRegistry+0x4c>)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10b      	bne.n	8002a50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002a38:	490b      	ldr	r1, [pc, #44]	@ (8002a68 <vQueueAddToRegistry+0x4c>)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002a42:	4a09      	ldr	r2, [pc, #36]	@ (8002a68 <vQueueAddToRegistry+0x4c>)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4413      	add	r3, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002a4e:	e006      	b.n	8002a5e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	3301      	adds	r3, #1
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b07      	cmp	r3, #7
 8002a5a:	d9e7      	bls.n	8002a2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002a5c:	bf00      	nop
 8002a5e:	bf00      	nop
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr
 8002a68:	20000744 	.word	0x20000744

08002a6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002a7c:	f001 fb46 	bl	800410c <vPortEnterCritical>
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a86:	b25b      	sxtb	r3, r3
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d103      	bne.n	8002a96 <vQueueWaitForMessageRestricted+0x2a>
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a9c:	b25b      	sxtb	r3, r3
 8002a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa2:	d103      	bne.n	8002aac <vQueueWaitForMessageRestricted+0x40>
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002aac:	f001 fb5e 	bl	800416c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d106      	bne.n	8002ac6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	3324      	adds	r3, #36	@ 0x24
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	68b9      	ldr	r1, [r7, #8]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 fc3f 	bl	8003344 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002ac6:	6978      	ldr	r0, [r7, #20]
 8002ac8:	f7ff ff28 	bl	800291c <prvUnlockQueue>
	}
 8002acc:	bf00      	nop
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08e      	sub	sp, #56	@ 0x38
 8002ad8:	af04      	add	r7, sp, #16
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10b      	bne.n	8002b00 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aec:	f383 8811 	msr	BASEPRI, r3
 8002af0:	f3bf 8f6f 	isb	sy
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	623b      	str	r3, [r7, #32]
}
 8002afa:	bf00      	nop
 8002afc:	bf00      	nop
 8002afe:	e7fd      	b.n	8002afc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10b      	bne.n	8002b1e <xTaskCreateStatic+0x4a>
	__asm volatile
 8002b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b0a:	f383 8811 	msr	BASEPRI, r3
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	61fb      	str	r3, [r7, #28]
}
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
 8002b1c:	e7fd      	b.n	8002b1a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b1e:	235c      	movs	r3, #92	@ 0x5c
 8002b20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2b5c      	cmp	r3, #92	@ 0x5c
 8002b26:	d00b      	beq.n	8002b40 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	61bb      	str	r3, [r7, #24]
}
 8002b3a:	bf00      	nop
 8002b3c:	bf00      	nop
 8002b3e:	e7fd      	b.n	8002b3c <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d01e      	beq.n	8002b84 <xTaskCreateStatic+0xb0>
 8002b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d01b      	beq.n	8002b84 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b54:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	2202      	movs	r2, #2
 8002b5a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b5e:	2300      	movs	r3, #0
 8002b60:	9303      	str	r3, [sp, #12]
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	9302      	str	r3, [sp, #8]
 8002b66:	f107 0314 	add.w	r3, r7, #20
 8002b6a:	9301      	str	r3, [sp, #4]
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68b9      	ldr	r1, [r7, #8]
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 f850 	bl	8002c1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002b7e:	f000 f8d5 	bl	8002d2c <prvAddNewTaskToReadyList>
 8002b82:	e001      	b.n	8002b88 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002b88:	697b      	ldr	r3, [r7, #20]
	}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3728      	adds	r7, #40	@ 0x28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b08c      	sub	sp, #48	@ 0x30
 8002b96:	af04      	add	r7, sp, #16
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	603b      	str	r3, [r7, #0]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f001 fbb2 	bl	8004310 <pvPortMalloc>
 8002bac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00e      	beq.n	8002bd2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002bb4:	205c      	movs	r0, #92	@ 0x5c
 8002bb6:	f001 fbab 	bl	8004310 <pvPortMalloc>
 8002bba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bc8:	e005      	b.n	8002bd6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002bca:	6978      	ldr	r0, [r7, #20]
 8002bcc:	f001 fc68 	bl	80044a0 <vPortFree>
 8002bd0:	e001      	b.n	8002bd6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d017      	beq.n	8002c0c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002be4:	88fa      	ldrh	r2, [r7, #6]
 8002be6:	2300      	movs	r3, #0
 8002be8:	9303      	str	r3, [sp, #12]
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	9302      	str	r3, [sp, #8]
 8002bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f80e 	bl	8002c1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c00:	69f8      	ldr	r0, [r7, #28]
 8002c02:	f000 f893 	bl	8002d2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c06:	2301      	movs	r3, #1
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	e002      	b.n	8002c12 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c10:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c12:	69bb      	ldr	r3, [r7, #24]
	}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3720      	adds	r7, #32
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	461a      	mov	r2, r3
 8002c34:	21a5      	movs	r1, #165	@ 0xa5
 8002c36:	f001 fd49 	bl	80046cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c44:	3b01      	subs	r3, #1
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	f023 0307 	bic.w	r3, r3, #7
 8002c52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00b      	beq.n	8002c76 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c62:	f383 8811 	msr	BASEPRI, r3
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	617b      	str	r3, [r7, #20]
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	e7fd      	b.n	8002c72 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	e012      	b.n	8002ca2 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	4413      	add	r3, r2
 8002c82:	7819      	ldrb	r1, [r3, #0]
 8002c84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	4413      	add	r3, r2
 8002c8a:	3334      	adds	r3, #52	@ 0x34
 8002c8c:	460a      	mov	r2, r1
 8002c8e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	4413      	add	r3, r2
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d006      	beq.n	8002caa <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	2b0f      	cmp	r3, #15
 8002ca6:	d9e9      	bls.n	8002c7c <prvInitialiseNewTask+0x60>
 8002ca8:	e000      	b.n	8002cac <prvInitialiseNewTask+0x90>
		{
			break;
 8002caa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb6:	2b37      	cmp	r3, #55	@ 0x37
 8002cb8:	d901      	bls.n	8002cbe <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002cba:	2337      	movs	r3, #55	@ 0x37
 8002cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cc8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ccc:	2200      	movs	r2, #0
 8002cce:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff f976 	bl	8001fc6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cdc:	3318      	adds	r3, #24
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff f971 	bl	8001fc6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ce8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cf8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	68f9      	ldr	r1, [r7, #12]
 8002d0c:	69b8      	ldr	r0, [r7, #24]
 8002d0e:	f001 f90b 	bl	8003f28 <pxPortInitialiseStack>
 8002d12:	4602      	mov	r2, r0
 8002d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d16:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d24:	bf00      	nop
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002d34:	f001 f9ea 	bl	800410c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002d38:	4b2d      	ldr	r3, [pc, #180]	@ (8002df0 <prvAddNewTaskToReadyList+0xc4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	4a2c      	ldr	r2, [pc, #176]	@ (8002df0 <prvAddNewTaskToReadyList+0xc4>)
 8002d40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002d42:	4b2c      	ldr	r3, [pc, #176]	@ (8002df4 <prvAddNewTaskToReadyList+0xc8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d109      	bne.n	8002d5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002d4a:	4a2a      	ldr	r2, [pc, #168]	@ (8002df4 <prvAddNewTaskToReadyList+0xc8>)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d50:	4b27      	ldr	r3, [pc, #156]	@ (8002df0 <prvAddNewTaskToReadyList+0xc4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d110      	bne.n	8002d7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002d58:	f000 fc22 	bl	80035a0 <prvInitialiseTaskLists>
 8002d5c:	e00d      	b.n	8002d7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002d5e:	4b26      	ldr	r3, [pc, #152]	@ (8002df8 <prvAddNewTaskToReadyList+0xcc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d66:	4b23      	ldr	r3, [pc, #140]	@ (8002df4 <prvAddNewTaskToReadyList+0xc8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d802      	bhi.n	8002d7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002d74:	4a1f      	ldr	r2, [pc, #124]	@ (8002df4 <prvAddNewTaskToReadyList+0xc8>)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002d7a:	4b20      	ldr	r3, [pc, #128]	@ (8002dfc <prvAddNewTaskToReadyList+0xd0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	4a1e      	ldr	r2, [pc, #120]	@ (8002dfc <prvAddNewTaskToReadyList+0xd0>)
 8002d82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d84:	4b1d      	ldr	r3, [pc, #116]	@ (8002dfc <prvAddNewTaskToReadyList+0xd0>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d90:	4b1b      	ldr	r3, [pc, #108]	@ (8002e00 <prvAddNewTaskToReadyList+0xd4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d903      	bls.n	8002da0 <prvAddNewTaskToReadyList+0x74>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9c:	4a18      	ldr	r2, [pc, #96]	@ (8002e00 <prvAddNewTaskToReadyList+0xd4>)
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4a15      	ldr	r2, [pc, #84]	@ (8002e04 <prvAddNewTaskToReadyList+0xd8>)
 8002dae:	441a      	add	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3304      	adds	r3, #4
 8002db4:	4619      	mov	r1, r3
 8002db6:	4610      	mov	r0, r2
 8002db8:	f7ff f911 	bl	8001fde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002dbc:	f001 f9d6 	bl	800416c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8002df8 <prvAddNewTaskToReadyList+0xcc>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00e      	beq.n	8002de6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002df4 <prvAddNewTaskToReadyList+0xc8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d207      	bcs.n	8002de6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002e08 <prvAddNewTaskToReadyList+0xdc>)
 8002dd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	f3bf 8f4f 	dsb	sy
 8002de2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000c58 	.word	0x20000c58
 8002df4:	20000784 	.word	0x20000784
 8002df8:	20000c64 	.word	0x20000c64
 8002dfc:	20000c74 	.word	0x20000c74
 8002e00:	20000c60 	.word	0x20000c60
 8002e04:	20000788 	.word	0x20000788
 8002e08:	e000ed04 	.word	0xe000ed04

08002e0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d018      	beq.n	8002e50 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e1e:	4b14      	ldr	r3, [pc, #80]	@ (8002e70 <vTaskDelay+0x64>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00b      	beq.n	8002e3e <vTaskDelay+0x32>
	__asm volatile
 8002e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e2a:	f383 8811 	msr	BASEPRI, r3
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	60bb      	str	r3, [r7, #8]
}
 8002e38:	bf00      	nop
 8002e3a:	bf00      	nop
 8002e3c:	e7fd      	b.n	8002e3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002e3e:	f000 f883 	bl	8002f48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e42:	2100      	movs	r1, #0
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 fcfb 	bl	8003840 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e4a:	f000 f88b 	bl	8002f64 <xTaskResumeAll>
 8002e4e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d107      	bne.n	8002e66 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002e56:	4b07      	ldr	r3, [pc, #28]	@ (8002e74 <vTaskDelay+0x68>)
 8002e58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e66:	bf00      	nop
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000c80 	.word	0x20000c80
 8002e74:	e000ed04 	.word	0xe000ed04

08002e78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	@ 0x28
 8002e7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002e86:	463a      	mov	r2, r7
 8002e88:	1d39      	adds	r1, r7, #4
 8002e8a:	f107 0308 	add.w	r3, r7, #8
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff f848 	bl	8001f24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002e94:	6839      	ldr	r1, [r7, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	9202      	str	r2, [sp, #8]
 8002e9c:	9301      	str	r3, [sp, #4]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	460a      	mov	r2, r1
 8002ea6:	4922      	ldr	r1, [pc, #136]	@ (8002f30 <vTaskStartScheduler+0xb8>)
 8002ea8:	4822      	ldr	r0, [pc, #136]	@ (8002f34 <vTaskStartScheduler+0xbc>)
 8002eaa:	f7ff fe13 	bl	8002ad4 <xTaskCreateStatic>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4a21      	ldr	r2, [pc, #132]	@ (8002f38 <vTaskStartScheduler+0xc0>)
 8002eb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002eb4:	4b20      	ldr	r3, [pc, #128]	@ (8002f38 <vTaskStartScheduler+0xc0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	e001      	b.n	8002ec6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d102      	bne.n	8002ed2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002ecc:	f000 fd0c 	bl	80038e8 <xTimerCreateTimerTask>
 8002ed0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d116      	bne.n	8002f06 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002edc:	f383 8811 	msr	BASEPRI, r3
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	613b      	str	r3, [r7, #16]
}
 8002eea:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002eec:	4b13      	ldr	r3, [pc, #76]	@ (8002f3c <vTaskStartScheduler+0xc4>)
 8002eee:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002ef4:	4b12      	ldr	r3, [pc, #72]	@ (8002f40 <vTaskStartScheduler+0xc8>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002efa:	4b12      	ldr	r3, [pc, #72]	@ (8002f44 <vTaskStartScheduler+0xcc>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002f00:	f001 f892 	bl	8004028 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002f04:	e00f      	b.n	8002f26 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0c:	d10b      	bne.n	8002f26 <vTaskStartScheduler+0xae>
	__asm volatile
 8002f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f12:	f383 8811 	msr	BASEPRI, r3
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	60fb      	str	r3, [r7, #12]
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	e7fd      	b.n	8002f22 <vTaskStartScheduler+0xaa>
}
 8002f26:	bf00      	nop
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	08004770 	.word	0x08004770
 8002f34:	08003571 	.word	0x08003571
 8002f38:	20000c7c 	.word	0x20000c7c
 8002f3c:	20000c78 	.word	0x20000c78
 8002f40:	20000c64 	.word	0x20000c64
 8002f44:	20000c5c 	.word	0x20000c5c

08002f48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002f4c:	4b04      	ldr	r3, [pc, #16]	@ (8002f60 <vTaskSuspendAll+0x18>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3301      	adds	r3, #1
 8002f52:	4a03      	ldr	r2, [pc, #12]	@ (8002f60 <vTaskSuspendAll+0x18>)
 8002f54:	6013      	str	r3, [r2, #0]
}
 8002f56:	bf00      	nop
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	20000c80 	.word	0x20000c80

08002f64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002f72:	4b42      	ldr	r3, [pc, #264]	@ (800307c <xTaskResumeAll+0x118>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10b      	bne.n	8002f92 <xTaskResumeAll+0x2e>
	__asm volatile
 8002f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	603b      	str	r3, [r7, #0]
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	e7fd      	b.n	8002f8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002f92:	f001 f8bb 	bl	800410c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002f96:	4b39      	ldr	r3, [pc, #228]	@ (800307c <xTaskResumeAll+0x118>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	4a37      	ldr	r2, [pc, #220]	@ (800307c <xTaskResumeAll+0x118>)
 8002f9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fa0:	4b36      	ldr	r3, [pc, #216]	@ (800307c <xTaskResumeAll+0x118>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d162      	bne.n	800306e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fa8:	4b35      	ldr	r3, [pc, #212]	@ (8003080 <xTaskResumeAll+0x11c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d05e      	beq.n	800306e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fb0:	e02f      	b.n	8003012 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002fb2:	4b34      	ldr	r3, [pc, #208]	@ (8003084 <xTaskResumeAll+0x120>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3318      	adds	r3, #24
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff f868 	bl	8002094 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff f863 	bl	8002094 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fd2:	4b2d      	ldr	r3, [pc, #180]	@ (8003088 <xTaskResumeAll+0x124>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d903      	bls.n	8002fe2 <xTaskResumeAll+0x7e>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fde:	4a2a      	ldr	r2, [pc, #168]	@ (8003088 <xTaskResumeAll+0x124>)
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4a27      	ldr	r2, [pc, #156]	@ (800308c <xTaskResumeAll+0x128>)
 8002ff0:	441a      	add	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f7fe fff0 	bl	8001fde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003002:	4b23      	ldr	r3, [pc, #140]	@ (8003090 <xTaskResumeAll+0x12c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003008:	429a      	cmp	r2, r3
 800300a:	d302      	bcc.n	8003012 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800300c:	4b21      	ldr	r3, [pc, #132]	@ (8003094 <xTaskResumeAll+0x130>)
 800300e:	2201      	movs	r2, #1
 8003010:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003012:	4b1c      	ldr	r3, [pc, #112]	@ (8003084 <xTaskResumeAll+0x120>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1cb      	bne.n	8002fb2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003020:	f000 fb5c 	bl	80036dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003024:	4b1c      	ldr	r3, [pc, #112]	@ (8003098 <xTaskResumeAll+0x134>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d010      	beq.n	8003052 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003030:	f000 f844 	bl	80030bc <xTaskIncrementTick>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800303a:	4b16      	ldr	r3, [pc, #88]	@ (8003094 <xTaskResumeAll+0x130>)
 800303c:	2201      	movs	r2, #1
 800303e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3b01      	subs	r3, #1
 8003044:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1f1      	bne.n	8003030 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800304c:	4b12      	ldr	r3, [pc, #72]	@ (8003098 <xTaskResumeAll+0x134>)
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003052:	4b10      	ldr	r3, [pc, #64]	@ (8003094 <xTaskResumeAll+0x130>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d009      	beq.n	800306e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800305a:	2301      	movs	r3, #1
 800305c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800305e:	4b0f      	ldr	r3, [pc, #60]	@ (800309c <xTaskResumeAll+0x138>)
 8003060:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800306e:	f001 f87d 	bl	800416c <vPortExitCritical>

	return xAlreadyYielded;
 8003072:	68bb      	ldr	r3, [r7, #8]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20000c80 	.word	0x20000c80
 8003080:	20000c58 	.word	0x20000c58
 8003084:	20000c18 	.word	0x20000c18
 8003088:	20000c60 	.word	0x20000c60
 800308c:	20000788 	.word	0x20000788
 8003090:	20000784 	.word	0x20000784
 8003094:	20000c6c 	.word	0x20000c6c
 8003098:	20000c68 	.word	0x20000c68
 800309c:	e000ed04 	.word	0xe000ed04

080030a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80030a6:	4b04      	ldr	r3, [pc, #16]	@ (80030b8 <xTaskGetTickCount+0x18>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80030ac:	687b      	ldr	r3, [r7, #4]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	20000c5c 	.word	0x20000c5c

080030bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030c6:	4b52      	ldr	r3, [pc, #328]	@ (8003210 <xTaskIncrementTick+0x154>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f040 808f 	bne.w	80031ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80030d0:	4b50      	ldr	r3, [pc, #320]	@ (8003214 <xTaskIncrementTick+0x158>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3301      	adds	r3, #1
 80030d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80030d8:	4a4e      	ldr	r2, [pc, #312]	@ (8003214 <xTaskIncrementTick+0x158>)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d121      	bne.n	8003128 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80030e4:	4b4c      	ldr	r3, [pc, #304]	@ (8003218 <xTaskIncrementTick+0x15c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00b      	beq.n	8003106 <xTaskIncrementTick+0x4a>
	__asm volatile
 80030ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	603b      	str	r3, [r7, #0]
}
 8003100:	bf00      	nop
 8003102:	bf00      	nop
 8003104:	e7fd      	b.n	8003102 <xTaskIncrementTick+0x46>
 8003106:	4b44      	ldr	r3, [pc, #272]	@ (8003218 <xTaskIncrementTick+0x15c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	4b43      	ldr	r3, [pc, #268]	@ (800321c <xTaskIncrementTick+0x160>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a41      	ldr	r2, [pc, #260]	@ (8003218 <xTaskIncrementTick+0x15c>)
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	4a41      	ldr	r2, [pc, #260]	@ (800321c <xTaskIncrementTick+0x160>)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	4b41      	ldr	r3, [pc, #260]	@ (8003220 <xTaskIncrementTick+0x164>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	3301      	adds	r3, #1
 8003120:	4a3f      	ldr	r2, [pc, #252]	@ (8003220 <xTaskIncrementTick+0x164>)
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	f000 fada 	bl	80036dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003128:	4b3e      	ldr	r3, [pc, #248]	@ (8003224 <xTaskIncrementTick+0x168>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	429a      	cmp	r2, r3
 8003130:	d34e      	bcc.n	80031d0 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003132:	4b39      	ldr	r3, [pc, #228]	@ (8003218 <xTaskIncrementTick+0x15c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <xTaskIncrementTick+0x84>
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <xTaskIncrementTick+0x86>
 8003140:	2300      	movs	r3, #0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d004      	beq.n	8003150 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003146:	4b37      	ldr	r3, [pc, #220]	@ (8003224 <xTaskIncrementTick+0x168>)
 8003148:	f04f 32ff 	mov.w	r2, #4294967295
 800314c:	601a      	str	r2, [r3, #0]
					break;
 800314e:	e03f      	b.n	80031d0 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003150:	4b31      	ldr	r3, [pc, #196]	@ (8003218 <xTaskIncrementTick+0x15c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	429a      	cmp	r2, r3
 8003166:	d203      	bcs.n	8003170 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003168:	4a2e      	ldr	r2, [pc, #184]	@ (8003224 <xTaskIncrementTick+0x168>)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6013      	str	r3, [r2, #0]
						break;
 800316e:	e02f      	b.n	80031d0 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	3304      	adds	r3, #4
 8003174:	4618      	mov	r0, r3
 8003176:	f7fe ff8d 	bl	8002094 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317e:	2b00      	cmp	r3, #0
 8003180:	d004      	beq.n	800318c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	3318      	adds	r3, #24
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe ff84 	bl	8002094 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003190:	4b25      	ldr	r3, [pc, #148]	@ (8003228 <xTaskIncrementTick+0x16c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d903      	bls.n	80031a0 <xTaskIncrementTick+0xe4>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319c:	4a22      	ldr	r2, [pc, #136]	@ (8003228 <xTaskIncrementTick+0x16c>)
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4a1f      	ldr	r2, [pc, #124]	@ (800322c <xTaskIncrementTick+0x170>)
 80031ae:	441a      	add	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	3304      	adds	r3, #4
 80031b4:	4619      	mov	r1, r3
 80031b6:	4610      	mov	r0, r2
 80031b8:	f7fe ff11 	bl	8001fde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003230 <xTaskIncrementTick+0x174>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d3b3      	bcc.n	8003132 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80031ca:	2301      	movs	r3, #1
 80031cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031ce:	e7b0      	b.n	8003132 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80031d0:	4b17      	ldr	r3, [pc, #92]	@ (8003230 <xTaskIncrementTick+0x174>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031d6:	4915      	ldr	r1, [pc, #84]	@ (800322c <xTaskIncrementTick+0x170>)
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d907      	bls.n	80031f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80031e8:	2301      	movs	r3, #1
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	e004      	b.n	80031f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80031ee:	4b11      	ldr	r3, [pc, #68]	@ (8003234 <xTaskIncrementTick+0x178>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3301      	adds	r3, #1
 80031f4:	4a0f      	ldr	r2, [pc, #60]	@ (8003234 <xTaskIncrementTick+0x178>)
 80031f6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80031f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003238 <xTaskIncrementTick+0x17c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8003200:	2301      	movs	r3, #1
 8003202:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003204:	697b      	ldr	r3, [r7, #20]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000c80 	.word	0x20000c80
 8003214:	20000c5c 	.word	0x20000c5c
 8003218:	20000c10 	.word	0x20000c10
 800321c:	20000c14 	.word	0x20000c14
 8003220:	20000c70 	.word	0x20000c70
 8003224:	20000c78 	.word	0x20000c78
 8003228:	20000c60 	.word	0x20000c60
 800322c:	20000788 	.word	0x20000788
 8003230:	20000784 	.word	0x20000784
 8003234:	20000c68 	.word	0x20000c68
 8003238:	20000c6c 	.word	0x20000c6c

0800323c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003242:	4b28      	ldr	r3, [pc, #160]	@ (80032e4 <vTaskSwitchContext+0xa8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800324a:	4b27      	ldr	r3, [pc, #156]	@ (80032e8 <vTaskSwitchContext+0xac>)
 800324c:	2201      	movs	r2, #1
 800324e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003250:	e042      	b.n	80032d8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003252:	4b25      	ldr	r3, [pc, #148]	@ (80032e8 <vTaskSwitchContext+0xac>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003258:	4b24      	ldr	r3, [pc, #144]	@ (80032ec <vTaskSwitchContext+0xb0>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	e011      	b.n	8003284 <vTaskSwitchContext+0x48>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10b      	bne.n	800327e <vTaskSwitchContext+0x42>
	__asm volatile
 8003266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	607b      	str	r3, [r7, #4]
}
 8003278:	bf00      	nop
 800327a:	bf00      	nop
 800327c:	e7fd      	b.n	800327a <vTaskSwitchContext+0x3e>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	3b01      	subs	r3, #1
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	491a      	ldr	r1, [pc, #104]	@ (80032f0 <vTaskSwitchContext+0xb4>)
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0e3      	beq.n	8003260 <vTaskSwitchContext+0x24>
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4a13      	ldr	r2, [pc, #76]	@ (80032f0 <vTaskSwitchContext+0xb4>)
 80032a4:	4413      	add	r3, r2
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	3308      	adds	r3, #8
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d104      	bne.n	80032c8 <vTaskSwitchContext+0x8c>
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	605a      	str	r2, [r3, #4]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	4a09      	ldr	r2, [pc, #36]	@ (80032f4 <vTaskSwitchContext+0xb8>)
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	4a06      	ldr	r2, [pc, #24]	@ (80032ec <vTaskSwitchContext+0xb0>)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6013      	str	r3, [r2, #0]
}
 80032d8:	bf00      	nop
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20000c80 	.word	0x20000c80
 80032e8:	20000c6c 	.word	0x20000c6c
 80032ec:	20000c60 	.word	0x20000c60
 80032f0:	20000788 	.word	0x20000788
 80032f4:	20000784 	.word	0x20000784

080032f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10b      	bne.n	8003320 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	60fb      	str	r3, [r7, #12]
}
 800331a:	bf00      	nop
 800331c:	bf00      	nop
 800331e:	e7fd      	b.n	800331c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003320:	4b07      	ldr	r3, [pc, #28]	@ (8003340 <vTaskPlaceOnEventList+0x48>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3318      	adds	r3, #24
 8003326:	4619      	mov	r1, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7fe fe7b 	bl	8002024 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800332e:	2101      	movs	r1, #1
 8003330:	6838      	ldr	r0, [r7, #0]
 8003332:	f000 fa85 	bl	8003840 <prvAddCurrentTaskToDelayedList>
}
 8003336:	bf00      	nop
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20000784 	.word	0x20000784

08003344 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10b      	bne.n	800336e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335a:	f383 8811 	msr	BASEPRI, r3
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	617b      	str	r3, [r7, #20]
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	e7fd      	b.n	800336a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800336e:	4b0a      	ldr	r3, [pc, #40]	@ (8003398 <vTaskPlaceOnEventListRestricted+0x54>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	3318      	adds	r3, #24
 8003374:	4619      	mov	r1, r3
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f7fe fe31 	bl	8001fde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003382:	f04f 33ff 	mov.w	r3, #4294967295
 8003386:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	68b8      	ldr	r0, [r7, #8]
 800338c:	f000 fa58 	bl	8003840 <prvAddCurrentTaskToDelayedList>
	}
 8003390:	bf00      	nop
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20000784 	.word	0x20000784

0800339c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10b      	bne.n	80033ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80033b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	60fb      	str	r3, [r7, #12]
}
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop
 80033c8:	e7fd      	b.n	80033c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	3318      	adds	r3, #24
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe fe60 	bl	8002094 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033d4:	4b1d      	ldr	r3, [pc, #116]	@ (800344c <xTaskRemoveFromEventList+0xb0>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d11d      	bne.n	8003418 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	3304      	adds	r3, #4
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fe fe57 	bl	8002094 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ea:	4b19      	ldr	r3, [pc, #100]	@ (8003450 <xTaskRemoveFromEventList+0xb4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d903      	bls.n	80033fa <xTaskRemoveFromEventList+0x5e>
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f6:	4a16      	ldr	r2, [pc, #88]	@ (8003450 <xTaskRemoveFromEventList+0xb4>)
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4a13      	ldr	r2, [pc, #76]	@ (8003454 <xTaskRemoveFromEventList+0xb8>)
 8003408:	441a      	add	r2, r3
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	3304      	adds	r3, #4
 800340e:	4619      	mov	r1, r3
 8003410:	4610      	mov	r0, r2
 8003412:	f7fe fde4 	bl	8001fde <vListInsertEnd>
 8003416:	e005      	b.n	8003424 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	3318      	adds	r3, #24
 800341c:	4619      	mov	r1, r3
 800341e:	480e      	ldr	r0, [pc, #56]	@ (8003458 <xTaskRemoveFromEventList+0xbc>)
 8003420:	f7fe fddd 	bl	8001fde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003428:	4b0c      	ldr	r3, [pc, #48]	@ (800345c <xTaskRemoveFromEventList+0xc0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342e:	429a      	cmp	r2, r3
 8003430:	d905      	bls.n	800343e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003432:	2301      	movs	r3, #1
 8003434:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003436:	4b0a      	ldr	r3, [pc, #40]	@ (8003460 <xTaskRemoveFromEventList+0xc4>)
 8003438:	2201      	movs	r2, #1
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	e001      	b.n	8003442 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003442:	697b      	ldr	r3, [r7, #20]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000c80 	.word	0x20000c80
 8003450:	20000c60 	.word	0x20000c60
 8003454:	20000788 	.word	0x20000788
 8003458:	20000c18 	.word	0x20000c18
 800345c:	20000784 	.word	0x20000784
 8003460:	20000c6c 	.word	0x20000c6c

08003464 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800346c:	4b06      	ldr	r3, [pc, #24]	@ (8003488 <vTaskInternalSetTimeOutState+0x24>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003474:	4b05      	ldr	r3, [pc, #20]	@ (800348c <vTaskInternalSetTimeOutState+0x28>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	605a      	str	r2, [r3, #4]
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	20000c70 	.word	0x20000c70
 800348c:	20000c5c 	.word	0x20000c5c

08003490 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10b      	bne.n	80034b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80034a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	613b      	str	r3, [r7, #16]
}
 80034b2:	bf00      	nop
 80034b4:	bf00      	nop
 80034b6:	e7fd      	b.n	80034b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10b      	bne.n	80034d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80034be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	60fb      	str	r3, [r7, #12]
}
 80034d0:	bf00      	nop
 80034d2:	bf00      	nop
 80034d4:	e7fd      	b.n	80034d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80034d6:	f000 fe19 	bl	800410c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80034da:	4b1d      	ldr	r3, [pc, #116]	@ (8003550 <xTaskCheckForTimeOut+0xc0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f2:	d102      	bne.n	80034fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61fb      	str	r3, [r7, #28]
 80034f8:	e023      	b.n	8003542 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4b15      	ldr	r3, [pc, #84]	@ (8003554 <xTaskCheckForTimeOut+0xc4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d007      	beq.n	8003516 <xTaskCheckForTimeOut+0x86>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	429a      	cmp	r2, r3
 800350e:	d302      	bcc.n	8003516 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003510:	2301      	movs	r3, #1
 8003512:	61fb      	str	r3, [r7, #28]
 8003514:	e015      	b.n	8003542 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	429a      	cmp	r2, r3
 800351e:	d20b      	bcs.n	8003538 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	1ad2      	subs	r2, r2, r3
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff ff99 	bl	8003464 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
 8003536:	e004      	b.n	8003542 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800353e:	2301      	movs	r3, #1
 8003540:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003542:	f000 fe13 	bl	800416c <vPortExitCritical>

	return xReturn;
 8003546:	69fb      	ldr	r3, [r7, #28]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3720      	adds	r7, #32
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	20000c5c 	.word	0x20000c5c
 8003554:	20000c70 	.word	0x20000c70

08003558 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800355c:	4b03      	ldr	r3, [pc, #12]	@ (800356c <vTaskMissedYield+0x14>)
 800355e:	2201      	movs	r2, #1
 8003560:	601a      	str	r2, [r3, #0]
}
 8003562:	bf00      	nop
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	20000c6c 	.word	0x20000c6c

08003570 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003578:	f000 f852 	bl	8003620 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800357c:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <prvIdleTask+0x28>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d9f9      	bls.n	8003578 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003584:	4b05      	ldr	r3, [pc, #20]	@ (800359c <prvIdleTask+0x2c>)
 8003586:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003594:	e7f0      	b.n	8003578 <prvIdleTask+0x8>
 8003596:	bf00      	nop
 8003598:	20000788 	.word	0x20000788
 800359c:	e000ed04 	.word	0xe000ed04

080035a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035a6:	2300      	movs	r3, #0
 80035a8:	607b      	str	r3, [r7, #4]
 80035aa:	e00c      	b.n	80035c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4a12      	ldr	r2, [pc, #72]	@ (8003600 <prvInitialiseTaskLists+0x60>)
 80035b8:	4413      	add	r3, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe fce4 	bl	8001f88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3301      	adds	r3, #1
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b37      	cmp	r3, #55	@ 0x37
 80035ca:	d9ef      	bls.n	80035ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80035cc:	480d      	ldr	r0, [pc, #52]	@ (8003604 <prvInitialiseTaskLists+0x64>)
 80035ce:	f7fe fcdb 	bl	8001f88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80035d2:	480d      	ldr	r0, [pc, #52]	@ (8003608 <prvInitialiseTaskLists+0x68>)
 80035d4:	f7fe fcd8 	bl	8001f88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80035d8:	480c      	ldr	r0, [pc, #48]	@ (800360c <prvInitialiseTaskLists+0x6c>)
 80035da:	f7fe fcd5 	bl	8001f88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80035de:	480c      	ldr	r0, [pc, #48]	@ (8003610 <prvInitialiseTaskLists+0x70>)
 80035e0:	f7fe fcd2 	bl	8001f88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80035e4:	480b      	ldr	r0, [pc, #44]	@ (8003614 <prvInitialiseTaskLists+0x74>)
 80035e6:	f7fe fccf 	bl	8001f88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80035ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003618 <prvInitialiseTaskLists+0x78>)
 80035ec:	4a05      	ldr	r2, [pc, #20]	@ (8003604 <prvInitialiseTaskLists+0x64>)
 80035ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035f0:	4b0a      	ldr	r3, [pc, #40]	@ (800361c <prvInitialiseTaskLists+0x7c>)
 80035f2:	4a05      	ldr	r2, [pc, #20]	@ (8003608 <prvInitialiseTaskLists+0x68>)
 80035f4:	601a      	str	r2, [r3, #0]
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000788 	.word	0x20000788
 8003604:	20000be8 	.word	0x20000be8
 8003608:	20000bfc 	.word	0x20000bfc
 800360c:	20000c18 	.word	0x20000c18
 8003610:	20000c2c 	.word	0x20000c2c
 8003614:	20000c44 	.word	0x20000c44
 8003618:	20000c10 	.word	0x20000c10
 800361c:	20000c14 	.word	0x20000c14

08003620 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003626:	e019      	b.n	800365c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003628:	f000 fd70 	bl	800410c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800362c:	4b10      	ldr	r3, [pc, #64]	@ (8003670 <prvCheckTasksWaitingTermination+0x50>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3304      	adds	r3, #4
 8003638:	4618      	mov	r0, r3
 800363a:	f7fe fd2b 	bl	8002094 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800363e:	4b0d      	ldr	r3, [pc, #52]	@ (8003674 <prvCheckTasksWaitingTermination+0x54>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3b01      	subs	r3, #1
 8003644:	4a0b      	ldr	r2, [pc, #44]	@ (8003674 <prvCheckTasksWaitingTermination+0x54>)
 8003646:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003648:	4b0b      	ldr	r3, [pc, #44]	@ (8003678 <prvCheckTasksWaitingTermination+0x58>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3b01      	subs	r3, #1
 800364e:	4a0a      	ldr	r2, [pc, #40]	@ (8003678 <prvCheckTasksWaitingTermination+0x58>)
 8003650:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003652:	f000 fd8b 	bl	800416c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f810 	bl	800367c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800365c:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <prvCheckTasksWaitingTermination+0x58>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e1      	bne.n	8003628 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20000c2c 	.word	0x20000c2c
 8003674:	20000c58 	.word	0x20000c58
 8003678:	20000c40 	.word	0x20000c40

0800367c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800368a:	2b00      	cmp	r3, #0
 800368c:	d108      	bne.n	80036a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003692:	4618      	mov	r0, r3
 8003694:	f000 ff04 	bl	80044a0 <vPortFree>
				vPortFree( pxTCB );
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 ff01 	bl	80044a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800369e:	e019      	b.n	80036d4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d103      	bne.n	80036b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fef8 	bl	80044a0 <vPortFree>
	}
 80036b0:	e010      	b.n	80036d4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d00b      	beq.n	80036d4 <prvDeleteTCB+0x58>
	__asm volatile
 80036bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	60fb      	str	r3, [r7, #12]
}
 80036ce:	bf00      	nop
 80036d0:	bf00      	nop
 80036d2:	e7fd      	b.n	80036d0 <prvDeleteTCB+0x54>
	}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036e2:	4b0e      	ldr	r3, [pc, #56]	@ (800371c <prvResetNextTaskUnblockTime+0x40>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <prvResetNextTaskUnblockTime+0x14>
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <prvResetNextTaskUnblockTime+0x16>
 80036f0:	2300      	movs	r3, #0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d004      	beq.n	8003700 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80036f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003720 <prvResetNextTaskUnblockTime+0x44>)
 80036f8:	f04f 32ff 	mov.w	r2, #4294967295
 80036fc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80036fe:	e008      	b.n	8003712 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003700:	4b06      	ldr	r3, [pc, #24]	@ (800371c <prvResetNextTaskUnblockTime+0x40>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4a04      	ldr	r2, [pc, #16]	@ (8003720 <prvResetNextTaskUnblockTime+0x44>)
 8003710:	6013      	str	r3, [r2, #0]
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr
 800371c:	20000c10 	.word	0x20000c10
 8003720:	20000c78 	.word	0x20000c78

08003724 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800372a:	4b0b      	ldr	r3, [pc, #44]	@ (8003758 <xTaskGetSchedulerState+0x34>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d102      	bne.n	8003738 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003732:	2301      	movs	r3, #1
 8003734:	607b      	str	r3, [r7, #4]
 8003736:	e008      	b.n	800374a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003738:	4b08      	ldr	r3, [pc, #32]	@ (800375c <xTaskGetSchedulerState+0x38>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d102      	bne.n	8003746 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003740:	2302      	movs	r3, #2
 8003742:	607b      	str	r3, [r7, #4]
 8003744:	e001      	b.n	800374a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003746:	2300      	movs	r3, #0
 8003748:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800374a:	687b      	ldr	r3, [r7, #4]
	}
 800374c:	4618      	mov	r0, r3
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000c64 	.word	0x20000c64
 800375c:	20000c80 	.word	0x20000c80

08003760 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d058      	beq.n	8003828 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003776:	4b2f      	ldr	r3, [pc, #188]	@ (8003834 <xTaskPriorityDisinherit+0xd4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	429a      	cmp	r2, r3
 800377e:	d00b      	beq.n	8003798 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	60fb      	str	r3, [r7, #12]
}
 8003792:	bf00      	nop
 8003794:	bf00      	nop
 8003796:	e7fd      	b.n	8003794 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10b      	bne.n	80037b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80037a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	60bb      	str	r3, [r7, #8]
}
 80037b2:	bf00      	nop
 80037b4:	bf00      	nop
 80037b6:	e7fd      	b.n	80037b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037bc:	1e5a      	subs	r2, r3, #1
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d02c      	beq.n	8003828 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d128      	bne.n	8003828 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	3304      	adds	r3, #4
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe fc5a 	bl	8002094 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003838 <xTaskPriorityDisinherit+0xd8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d903      	bls.n	8003808 <xTaskPriorityDisinherit+0xa8>
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003804:	4a0c      	ldr	r2, [pc, #48]	@ (8003838 <xTaskPriorityDisinherit+0xd8>)
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4a09      	ldr	r2, [pc, #36]	@ (800383c <xTaskPriorityDisinherit+0xdc>)
 8003816:	441a      	add	r2, r3
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	3304      	adds	r3, #4
 800381c:	4619      	mov	r1, r3
 800381e:	4610      	mov	r0, r2
 8003820:	f7fe fbdd 	bl	8001fde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003824:	2301      	movs	r3, #1
 8003826:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003828:	697b      	ldr	r3, [r7, #20]
	}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000784 	.word	0x20000784
 8003838:	20000c60 	.word	0x20000c60
 800383c:	20000788 	.word	0x20000788

08003840 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800384a:	4b21      	ldr	r3, [pc, #132]	@ (80038d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003850:	4b20      	ldr	r3, [pc, #128]	@ (80038d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3304      	adds	r3, #4
 8003856:	4618      	mov	r0, r3
 8003858:	f7fe fc1c 	bl	8002094 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003862:	d10a      	bne.n	800387a <prvAddCurrentTaskToDelayedList+0x3a>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d007      	beq.n	800387a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800386a:	4b1a      	ldr	r3, [pc, #104]	@ (80038d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3304      	adds	r3, #4
 8003870:	4619      	mov	r1, r3
 8003872:	4819      	ldr	r0, [pc, #100]	@ (80038d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003874:	f7fe fbb3 	bl	8001fde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003878:	e026      	b.n	80038c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4413      	add	r3, r2
 8003880:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003882:	4b14      	ldr	r3, [pc, #80]	@ (80038d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	429a      	cmp	r2, r3
 8003890:	d209      	bcs.n	80038a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003892:	4b12      	ldr	r3, [pc, #72]	@ (80038dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	4b0f      	ldr	r3, [pc, #60]	@ (80038d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3304      	adds	r3, #4
 800389c:	4619      	mov	r1, r3
 800389e:	4610      	mov	r0, r2
 80038a0:	f7fe fbc0 	bl	8002024 <vListInsert>
}
 80038a4:	e010      	b.n	80038c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038a6:	4b0e      	ldr	r3, [pc, #56]	@ (80038e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	4b0a      	ldr	r3, [pc, #40]	@ (80038d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3304      	adds	r3, #4
 80038b0:	4619      	mov	r1, r3
 80038b2:	4610      	mov	r0, r2
 80038b4:	f7fe fbb6 	bl	8002024 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80038b8:	4b0a      	ldr	r3, [pc, #40]	@ (80038e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d202      	bcs.n	80038c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80038c2:	4a08      	ldr	r2, [pc, #32]	@ (80038e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	6013      	str	r3, [r2, #0]
}
 80038c8:	bf00      	nop
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000c5c 	.word	0x20000c5c
 80038d4:	20000784 	.word	0x20000784
 80038d8:	20000c44 	.word	0x20000c44
 80038dc:	20000c14 	.word	0x20000c14
 80038e0:	20000c10 	.word	0x20000c10
 80038e4:	20000c78 	.word	0x20000c78

080038e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	@ 0x28
 80038ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80038f2:	f000 fad9 	bl	8003ea8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80038f6:	4b1d      	ldr	r3, [pc, #116]	@ (800396c <xTimerCreateTimerTask+0x84>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d021      	beq.n	8003942 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003906:	1d3a      	adds	r2, r7, #4
 8003908:	f107 0108 	add.w	r1, r7, #8
 800390c:	f107 030c 	add.w	r3, r7, #12
 8003910:	4618      	mov	r0, r3
 8003912:	f7fe fb1f 	bl	8001f54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	9202      	str	r2, [sp, #8]
 800391e:	9301      	str	r3, [sp, #4]
 8003920:	2302      	movs	r3, #2
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	2300      	movs	r3, #0
 8003926:	460a      	mov	r2, r1
 8003928:	4911      	ldr	r1, [pc, #68]	@ (8003970 <xTimerCreateTimerTask+0x88>)
 800392a:	4812      	ldr	r0, [pc, #72]	@ (8003974 <xTimerCreateTimerTask+0x8c>)
 800392c:	f7ff f8d2 	bl	8002ad4 <xTaskCreateStatic>
 8003930:	4603      	mov	r3, r0
 8003932:	4a11      	ldr	r2, [pc, #68]	@ (8003978 <xTimerCreateTimerTask+0x90>)
 8003934:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003936:	4b10      	ldr	r3, [pc, #64]	@ (8003978 <xTimerCreateTimerTask+0x90>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800393e:	2301      	movs	r3, #1
 8003940:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10b      	bne.n	8003960 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	613b      	str	r3, [r7, #16]
}
 800395a:	bf00      	nop
 800395c:	bf00      	nop
 800395e:	e7fd      	b.n	800395c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003960:	697b      	ldr	r3, [r7, #20]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000cb4 	.word	0x20000cb4
 8003970:	08004778 	.word	0x08004778
 8003974:	08003a9d 	.word	0x08003a9d
 8003978:	20000cb8 	.word	0x20000cb8

0800397c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	@ 0x28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800398a:	2300      	movs	r3, #0
 800398c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10b      	bne.n	80039ac <xTimerGenericCommand+0x30>
	__asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	623b      	str	r3, [r7, #32]
}
 80039a6:	bf00      	nop
 80039a8:	bf00      	nop
 80039aa:	e7fd      	b.n	80039a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80039ac:	4b19      	ldr	r3, [pc, #100]	@ (8003a14 <xTimerGenericCommand+0x98>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d02a      	beq.n	8003a0a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b05      	cmp	r3, #5
 80039c4:	dc18      	bgt.n	80039f8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80039c6:	f7ff fead 	bl	8003724 <xTaskGetSchedulerState>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d109      	bne.n	80039e4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80039d0:	4b10      	ldr	r3, [pc, #64]	@ (8003a14 <xTimerGenericCommand+0x98>)
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	f107 0110 	add.w	r1, r7, #16
 80039d8:	2300      	movs	r3, #0
 80039da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039dc:	f7fe fc8e 	bl	80022fc <xQueueGenericSend>
 80039e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80039e2:	e012      	b.n	8003a0a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80039e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a14 <xTimerGenericCommand+0x98>)
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	f107 0110 	add.w	r1, r7, #16
 80039ec:	2300      	movs	r3, #0
 80039ee:	2200      	movs	r2, #0
 80039f0:	f7fe fc84 	bl	80022fc <xQueueGenericSend>
 80039f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80039f6:	e008      	b.n	8003a0a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80039f8:	4b06      	ldr	r3, [pc, #24]	@ (8003a14 <xTimerGenericCommand+0x98>)
 80039fa:	6818      	ldr	r0, [r3, #0]
 80039fc:	f107 0110 	add.w	r1, r7, #16
 8003a00:	2300      	movs	r3, #0
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	f7fe fd7c 	bl	8002500 <xQueueGenericSendFromISR>
 8003a08:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3728      	adds	r7, #40	@ 0x28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20000cb4 	.word	0x20000cb4

08003a18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a22:	4b1d      	ldr	r3, [pc, #116]	@ (8003a98 <prvProcessExpiredTimer+0x80>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fe fb2f 	bl	8002094 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d123      	bne.n	8003a86 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	18d1      	adds	r1, r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	6978      	ldr	r0, [r7, #20]
 8003a4c:	f000 f8cc 	bl	8003be8 <prvInsertTimerInActiveList>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d017      	beq.n	8003a86 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a56:	2300      	movs	r3, #0
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	2100      	movs	r1, #0
 8003a60:	6978      	ldr	r0, [r7, #20]
 8003a62:	f7ff ff8b 	bl	800397c <xTimerGenericCommand>
 8003a66:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10b      	bne.n	8003a86 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	60fb      	str	r3, [r7, #12]
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	e7fd      	b.n	8003a82 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	6978      	ldr	r0, [r7, #20]
 8003a8c:	4798      	blx	r3
}
 8003a8e:	bf00      	nop
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000cac 	.word	0x20000cac

08003a9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003aa4:	f107 0308 	add.w	r3, r7, #8
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 f859 	bl	8003b60 <prvGetNextExpireTime>
 8003aae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 f805 	bl	8003ac4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003aba:	f000 f8d7 	bl	8003c6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003abe:	bf00      	nop
 8003ac0:	e7f0      	b.n	8003aa4 <prvTimerTask+0x8>
	...

08003ac4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003ace:	f7ff fa3b 	bl	8002f48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ad2:	f107 0308 	add.w	r3, r7, #8
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 f866 	bl	8003ba8 <prvSampleTimeNow>
 8003adc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d130      	bne.n	8003b46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <prvProcessTimerOrBlockTask+0x3c>
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d806      	bhi.n	8003b00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003af2:	f7ff fa37 	bl	8002f64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003af6:	68f9      	ldr	r1, [r7, #12]
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff ff8d 	bl	8003a18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003afe:	e024      	b.n	8003b4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b06:	4b13      	ldr	r3, [pc, #76]	@ (8003b54 <prvProcessTimerOrBlockTask+0x90>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b18:	4b0f      	ldr	r3, [pc, #60]	@ (8003b58 <prvProcessTimerOrBlockTask+0x94>)
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	4619      	mov	r1, r3
 8003b26:	f7fe ffa1 	bl	8002a6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003b2a:	f7ff fa1b 	bl	8002f64 <xTaskResumeAll>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10a      	bne.n	8003b4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003b34:	4b09      	ldr	r3, [pc, #36]	@ (8003b5c <prvProcessTimerOrBlockTask+0x98>)
 8003b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	f3bf 8f6f 	isb	sy
}
 8003b44:	e001      	b.n	8003b4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003b46:	f7ff fa0d 	bl	8002f64 <xTaskResumeAll>
}
 8003b4a:	bf00      	nop
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20000cb0 	.word	0x20000cb0
 8003b58:	20000cb4 	.word	0x20000cb4
 8003b5c:	e000ed04 	.word	0xe000ed04

08003b60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003b68:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba4 <prvGetNextExpireTime+0x44>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	bf0c      	ite	eq
 8003b72:	2301      	moveq	r3, #1
 8003b74:	2300      	movne	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d105      	bne.n	8003b92 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b86:	4b07      	ldr	r3, [pc, #28]	@ (8003ba4 <prvGetNextExpireTime+0x44>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e001      	b.n	8003b96 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003b96:	68fb      	ldr	r3, [r7, #12]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	20000cac 	.word	0x20000cac

08003ba8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003bb0:	f7ff fa76 	bl	80030a0 <xTaskGetTickCount>
 8003bb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003be4 <prvSampleTimeNow+0x3c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d205      	bcs.n	8003bcc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003bc0:	f000 f910 	bl	8003de4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	e002      	b.n	8003bd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003bd2:	4a04      	ldr	r2, [pc, #16]	@ (8003be4 <prvSampleTimeNow+0x3c>)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000cbc 	.word	0x20000cbc

08003be8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d812      	bhi.n	8003c34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	1ad2      	subs	r2, r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d302      	bcc.n	8003c22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	e01b      	b.n	8003c5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c22:	4b10      	ldr	r3, [pc, #64]	@ (8003c64 <prvInsertTimerInActiveList+0x7c>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	f7fe f9f9 	bl	8002024 <vListInsert>
 8003c32:	e012      	b.n	8003c5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d206      	bcs.n	8003c4a <prvInsertTimerInActiveList+0x62>
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d302      	bcc.n	8003c4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003c44:	2301      	movs	r3, #1
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	e007      	b.n	8003c5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c4a:	4b07      	ldr	r3, [pc, #28]	@ (8003c68 <prvInsertTimerInActiveList+0x80>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	3304      	adds	r3, #4
 8003c52:	4619      	mov	r1, r3
 8003c54:	4610      	mov	r0, r2
 8003c56:	f7fe f9e5 	bl	8002024 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003c5a:	697b      	ldr	r3, [r7, #20]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20000cb0 	.word	0x20000cb0
 8003c68:	20000cac 	.word	0x20000cac

08003c6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08e      	sub	sp, #56	@ 0x38
 8003c70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c72:	e0a5      	b.n	8003dc0 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	da19      	bge.n	8003cae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003c7a:	1d3b      	adds	r3, r7, #4
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10b      	bne.n	8003c9e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c8a:	f383 8811 	msr	BASEPRI, r3
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	61fb      	str	r3, [r7, #28]
}
 8003c98:	bf00      	nop
 8003c9a:	bf00      	nop
 8003c9c:	e7fd      	b.n	8003c9a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ca4:	6850      	ldr	r0, [r2, #4]
 8003ca6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ca8:	6892      	ldr	r2, [r2, #8]
 8003caa:	4611      	mov	r1, r2
 8003cac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f2c0 8085 	blt.w	8003dc0 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d004      	beq.n	8003ccc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe f9e4 	bl	8002094 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ccc:	463b      	mov	r3, r7
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff ff6a 	bl	8003ba8 <prvSampleTimeNow>
 8003cd4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b09      	cmp	r3, #9
 8003cda:	d86c      	bhi.n	8003db6 <prvProcessReceivedCommands+0x14a>
 8003cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce4 <prvProcessReceivedCommands+0x78>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003d0d 	.word	0x08003d0d
 8003ce8:	08003d0d 	.word	0x08003d0d
 8003cec:	08003d0d 	.word	0x08003d0d
 8003cf0:	08003db7 	.word	0x08003db7
 8003cf4:	08003d6b 	.word	0x08003d6b
 8003cf8:	08003da5 	.word	0x08003da5
 8003cfc:	08003d0d 	.word	0x08003d0d
 8003d00:	08003d0d 	.word	0x08003d0d
 8003d04:	08003db7 	.word	0x08003db7
 8003d08:	08003d6b 	.word	0x08003d6b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	18d1      	adds	r1, r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d1a:	f7ff ff65 	bl	8003be8 <prvInsertTimerInActiveList>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d04a      	beq.n	8003dba <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d2a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d142      	bne.n	8003dba <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	441a      	add	r2, r3
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	2300      	movs	r3, #0
 8003d42:	2100      	movs	r1, #0
 8003d44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d46:	f7ff fe19 	bl	800397c <xTimerGenericCommand>
 8003d4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d133      	bne.n	8003dba <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	61bb      	str	r3, [r7, #24]
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	e7fd      	b.n	8003d66 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10b      	bne.n	8003d90 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	617b      	str	r3, [r7, #20]
}
 8003d8a:	bf00      	nop
 8003d8c:	bf00      	nop
 8003d8e:	e7fd      	b.n	8003d8c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d92:	699a      	ldr	r2, [r3, #24]
 8003d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d96:	18d1      	adds	r1, r2, r3
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d9e:	f7ff ff23 	bl	8003be8 <prvInsertTimerInActiveList>
					break;
 8003da2:	e00d      	b.n	8003dc0 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d107      	bne.n	8003dbe <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8003dae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003db0:	f000 fb76 	bl	80044a0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003db4:	e003      	b.n	8003dbe <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8003db6:	bf00      	nop
 8003db8:	e002      	b.n	8003dc0 <prvProcessReceivedCommands+0x154>
					break;
 8003dba:	bf00      	nop
 8003dbc:	e000      	b.n	8003dc0 <prvProcessReceivedCommands+0x154>
					break;
 8003dbe:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003dc0:	4b07      	ldr	r3, [pc, #28]	@ (8003de0 <prvProcessReceivedCommands+0x174>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	1d39      	adds	r1, r7, #4
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fe fc35 	bl	8002638 <xQueueReceive>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f47f af4f 	bne.w	8003c74 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003dd6:	bf00      	nop
 8003dd8:	bf00      	nop
 8003dda:	3730      	adds	r7, #48	@ 0x30
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20000cb4 	.word	0x20000cb4

08003de4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003dea:	e046      	b.n	8003e7a <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dec:	4b2c      	ldr	r3, [pc, #176]	@ (8003ea0 <prvSwitchTimerLists+0xbc>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003df6:	4b2a      	ldr	r3, [pc, #168]	@ (8003ea0 <prvSwitchTimerLists+0xbc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	3304      	adds	r3, #4
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fe f945 	bl	8002094 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d12f      	bne.n	8003e7a <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4413      	add	r3, r2
 8003e22:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d90e      	bls.n	8003e4a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e38:	4b19      	ldr	r3, [pc, #100]	@ (8003ea0 <prvSwitchTimerLists+0xbc>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	4619      	mov	r1, r3
 8003e42:	4610      	mov	r0, r2
 8003e44:	f7fe f8ee 	bl	8002024 <vListInsert>
 8003e48:	e017      	b.n	8003e7a <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	2100      	movs	r1, #0
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f7ff fd91 	bl	800397c <xTimerGenericCommand>
 8003e5a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10b      	bne.n	8003e7a <prvSwitchTimerLists+0x96>
	__asm volatile
 8003e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	603b      	str	r3, [r7, #0]
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop
 8003e78:	e7fd      	b.n	8003e76 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e7a:	4b09      	ldr	r3, [pc, #36]	@ (8003ea0 <prvSwitchTimerLists+0xbc>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1b3      	bne.n	8003dec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003e84:	4b06      	ldr	r3, [pc, #24]	@ (8003ea0 <prvSwitchTimerLists+0xbc>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003e8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ea4 <prvSwitchTimerLists+0xc0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a04      	ldr	r2, [pc, #16]	@ (8003ea0 <prvSwitchTimerLists+0xbc>)
 8003e90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003e92:	4a04      	ldr	r2, [pc, #16]	@ (8003ea4 <prvSwitchTimerLists+0xc0>)
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	6013      	str	r3, [r2, #0]
}
 8003e98:	bf00      	nop
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	20000cac 	.word	0x20000cac
 8003ea4:	20000cb0 	.word	0x20000cb0

08003ea8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003eae:	f000 f92d 	bl	800410c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003eb2:	4b15      	ldr	r3, [pc, #84]	@ (8003f08 <prvCheckForValidListAndQueue+0x60>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d120      	bne.n	8003efc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003eba:	4814      	ldr	r0, [pc, #80]	@ (8003f0c <prvCheckForValidListAndQueue+0x64>)
 8003ebc:	f7fe f864 	bl	8001f88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003ec0:	4813      	ldr	r0, [pc, #76]	@ (8003f10 <prvCheckForValidListAndQueue+0x68>)
 8003ec2:	f7fe f861 	bl	8001f88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003ec6:	4b13      	ldr	r3, [pc, #76]	@ (8003f14 <prvCheckForValidListAndQueue+0x6c>)
 8003ec8:	4a10      	ldr	r2, [pc, #64]	@ (8003f0c <prvCheckForValidListAndQueue+0x64>)
 8003eca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003ecc:	4b12      	ldr	r3, [pc, #72]	@ (8003f18 <prvCheckForValidListAndQueue+0x70>)
 8003ece:	4a10      	ldr	r2, [pc, #64]	@ (8003f10 <prvCheckForValidListAndQueue+0x68>)
 8003ed0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	4b11      	ldr	r3, [pc, #68]	@ (8003f1c <prvCheckForValidListAndQueue+0x74>)
 8003ed8:	4a11      	ldr	r2, [pc, #68]	@ (8003f20 <prvCheckForValidListAndQueue+0x78>)
 8003eda:	2110      	movs	r1, #16
 8003edc:	200a      	movs	r0, #10
 8003ede:	f7fe f96d 	bl	80021bc <xQueueGenericCreateStatic>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	4a08      	ldr	r2, [pc, #32]	@ (8003f08 <prvCheckForValidListAndQueue+0x60>)
 8003ee6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003ee8:	4b07      	ldr	r3, [pc, #28]	@ (8003f08 <prvCheckForValidListAndQueue+0x60>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003ef0:	4b05      	ldr	r3, [pc, #20]	@ (8003f08 <prvCheckForValidListAndQueue+0x60>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	490b      	ldr	r1, [pc, #44]	@ (8003f24 <prvCheckForValidListAndQueue+0x7c>)
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe fd90 	bl	8002a1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003efc:	f000 f936 	bl	800416c <vPortExitCritical>
}
 8003f00:	bf00      	nop
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000cb4 	.word	0x20000cb4
 8003f0c:	20000c84 	.word	0x20000c84
 8003f10:	20000c98 	.word	0x20000c98
 8003f14:	20000cac 	.word	0x20000cac
 8003f18:	20000cb0 	.word	0x20000cb0
 8003f1c:	20000d60 	.word	0x20000d60
 8003f20:	20000cc0 	.word	0x20000cc0
 8003f24:	08004780 	.word	0x08004780

08003f28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	3b04      	subs	r3, #4
 8003f38:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3b04      	subs	r3, #4
 8003f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f023 0201 	bic.w	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3b04      	subs	r3, #4
 8003f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f58:	4a08      	ldr	r2, [pc, #32]	@ (8003f7c <pxPortInitialiseStack+0x54>)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3b14      	subs	r3, #20
 8003f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3b20      	subs	r3, #32
 8003f6e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003f70:	68fb      	ldr	r3, [r7, #12]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr
 8003f7c:	08003f81 	.word	0x08003f81

08003f80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003f86:	2300      	movs	r3, #0
 8003f88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003f8a:	4b12      	ldr	r3, [pc, #72]	@ (8003fd4 <prvTaskExitError+0x54>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d00b      	beq.n	8003fac <prvTaskExitError+0x2c>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	60fb      	str	r3, [r7, #12]
}
 8003fa6:	bf00      	nop
 8003fa8:	bf00      	nop
 8003faa:	e7fd      	b.n	8003fa8 <prvTaskExitError+0x28>
	__asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	60bb      	str	r3, [r7, #8]
}
 8003fbe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003fc0:	bf00      	nop
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0fc      	beq.n	8003fc2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003fc8:	bf00      	nop
 8003fca:	bf00      	nop
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr
 8003fd4:	20000010 	.word	0x20000010
	...

08003fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003fe0:	4b07      	ldr	r3, [pc, #28]	@ (8004000 <pxCurrentTCBConst2>)
 8003fe2:	6819      	ldr	r1, [r3, #0]
 8003fe4:	6808      	ldr	r0, [r1, #0]
 8003fe6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003fea:	f380 8809 	msr	PSP, r0
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f04f 0000 	mov.w	r0, #0
 8003ff6:	f380 8811 	msr	BASEPRI, r0
 8003ffa:	f04e 0e0d 	orr.w	lr, lr, #13
 8003ffe:	4770      	bx	lr

08004000 <pxCurrentTCBConst2>:
 8004000:	20000784 	.word	0x20000784
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop

08004008 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004008:	4806      	ldr	r0, [pc, #24]	@ (8004024 <prvPortStartFirstTask+0x1c>)
 800400a:	6800      	ldr	r0, [r0, #0]
 800400c:	6800      	ldr	r0, [r0, #0]
 800400e:	f380 8808 	msr	MSP, r0
 8004012:	b662      	cpsie	i
 8004014:	b661      	cpsie	f
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	df00      	svc	0
 8004020:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004022:	bf00      	nop
 8004024:	e000ed08 	.word	0xe000ed08

08004028 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800402e:	4b32      	ldr	r3, [pc, #200]	@ (80040f8 <xPortStartScheduler+0xd0>)
 8004030:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	22ff      	movs	r2, #255	@ 0xff
 800403e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004050:	b2da      	uxtb	r2, r3
 8004052:	4b2a      	ldr	r3, [pc, #168]	@ (80040fc <xPortStartScheduler+0xd4>)
 8004054:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004056:	4b2a      	ldr	r3, [pc, #168]	@ (8004100 <xPortStartScheduler+0xd8>)
 8004058:	2207      	movs	r2, #7
 800405a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800405c:	e009      	b.n	8004072 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800405e:	4b28      	ldr	r3, [pc, #160]	@ (8004100 <xPortStartScheduler+0xd8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3b01      	subs	r3, #1
 8004064:	4a26      	ldr	r2, [pc, #152]	@ (8004100 <xPortStartScheduler+0xd8>)
 8004066:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	b2db      	uxtb	r3, r3
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	b2db      	uxtb	r3, r3
 8004070:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800407a:	2b80      	cmp	r3, #128	@ 0x80
 800407c:	d0ef      	beq.n	800405e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800407e:	4b20      	ldr	r3, [pc, #128]	@ (8004100 <xPortStartScheduler+0xd8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f1c3 0307 	rsb	r3, r3, #7
 8004086:	2b04      	cmp	r3, #4
 8004088:	d00b      	beq.n	80040a2 <xPortStartScheduler+0x7a>
	__asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	60bb      	str	r3, [r7, #8]
}
 800409c:	bf00      	nop
 800409e:	bf00      	nop
 80040a0:	e7fd      	b.n	800409e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80040a2:	4b17      	ldr	r3, [pc, #92]	@ (8004100 <xPortStartScheduler+0xd8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	4a15      	ldr	r2, [pc, #84]	@ (8004100 <xPortStartScheduler+0xd8>)
 80040aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80040ac:	4b14      	ldr	r3, [pc, #80]	@ (8004100 <xPortStartScheduler+0xd8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80040b4:	4a12      	ldr	r2, [pc, #72]	@ (8004100 <xPortStartScheduler+0xd8>)
 80040b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80040c0:	4b10      	ldr	r3, [pc, #64]	@ (8004104 <xPortStartScheduler+0xdc>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a0f      	ldr	r2, [pc, #60]	@ (8004104 <xPortStartScheduler+0xdc>)
 80040c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80040ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80040cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004104 <xPortStartScheduler+0xdc>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a0c      	ldr	r2, [pc, #48]	@ (8004104 <xPortStartScheduler+0xdc>)
 80040d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80040d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80040d8:	f000 f8b8 	bl	800424c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80040dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004108 <xPortStartScheduler+0xe0>)
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80040e2:	f7ff ff91 	bl	8004008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80040e6:	f7ff f8a9 	bl	800323c <vTaskSwitchContext>
	prvTaskExitError();
 80040ea:	f7ff ff49 	bl	8003f80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	e000e400 	.word	0xe000e400
 80040fc:	20000db0 	.word	0x20000db0
 8004100:	20000db4 	.word	0x20000db4
 8004104:	e000ed20 	.word	0xe000ed20
 8004108:	20000010 	.word	0x20000010

0800410c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
	__asm volatile
 8004112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	607b      	str	r3, [r7, #4]
}
 8004124:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004126:	4b0f      	ldr	r3, [pc, #60]	@ (8004164 <vPortEnterCritical+0x58>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	3301      	adds	r3, #1
 800412c:	4a0d      	ldr	r2, [pc, #52]	@ (8004164 <vPortEnterCritical+0x58>)
 800412e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004130:	4b0c      	ldr	r3, [pc, #48]	@ (8004164 <vPortEnterCritical+0x58>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d110      	bne.n	800415a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004138:	4b0b      	ldr	r3, [pc, #44]	@ (8004168 <vPortEnterCritical+0x5c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00b      	beq.n	800415a <vPortEnterCritical+0x4e>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	603b      	str	r3, [r7, #0]
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	e7fd      	b.n	8004156 <vPortEnterCritical+0x4a>
	}
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	20000010 	.word	0x20000010
 8004168:	e000ed04 	.word	0xe000ed04

0800416c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004172:	4b12      	ldr	r3, [pc, #72]	@ (80041bc <vPortExitCritical+0x50>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10b      	bne.n	8004192 <vPortExitCritical+0x26>
	__asm volatile
 800417a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	607b      	str	r3, [r7, #4]
}
 800418c:	bf00      	nop
 800418e:	bf00      	nop
 8004190:	e7fd      	b.n	800418e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004192:	4b0a      	ldr	r3, [pc, #40]	@ (80041bc <vPortExitCritical+0x50>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3b01      	subs	r3, #1
 8004198:	4a08      	ldr	r2, [pc, #32]	@ (80041bc <vPortExitCritical+0x50>)
 800419a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800419c:	4b07      	ldr	r3, [pc, #28]	@ (80041bc <vPortExitCritical+0x50>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d105      	bne.n	80041b0 <vPortExitCritical+0x44>
 80041a4:	2300      	movs	r3, #0
 80041a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	f383 8811 	msr	BASEPRI, r3
}
 80041ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	20000010 	.word	0x20000010

080041c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80041c0:	f3ef 8009 	mrs	r0, PSP
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	4b0d      	ldr	r3, [pc, #52]	@ (8004200 <pxCurrentTCBConst>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80041d0:	6010      	str	r0, [r2, #0]
 80041d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80041d6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80041da:	f380 8811 	msr	BASEPRI, r0
 80041de:	f7ff f82d 	bl	800323c <vTaskSwitchContext>
 80041e2:	f04f 0000 	mov.w	r0, #0
 80041e6:	f380 8811 	msr	BASEPRI, r0
 80041ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80041ee:	6819      	ldr	r1, [r3, #0]
 80041f0:	6808      	ldr	r0, [r1, #0]
 80041f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80041f6:	f380 8809 	msr	PSP, r0
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	4770      	bx	lr

08004200 <pxCurrentTCBConst>:
 8004200:	20000784 	.word	0x20000784
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop

08004208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
	__asm volatile
 800420e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	607b      	str	r3, [r7, #4]
}
 8004220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004222:	f7fe ff4b 	bl	80030bc <xTaskIncrementTick>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800422c:	4b06      	ldr	r3, [pc, #24]	@ (8004248 <SysTick_Handler+0x40>)
 800422e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	2300      	movs	r3, #0
 8004236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	f383 8811 	msr	BASEPRI, r3
}
 800423e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004240:	bf00      	nop
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	e000ed04 	.word	0xe000ed04

0800424c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004250:	4b0a      	ldr	r3, [pc, #40]	@ (800427c <vPortSetupTimerInterrupt+0x30>)
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004256:	4b0a      	ldr	r3, [pc, #40]	@ (8004280 <vPortSetupTimerInterrupt+0x34>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800425c:	4b09      	ldr	r3, [pc, #36]	@ (8004284 <vPortSetupTimerInterrupt+0x38>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a09      	ldr	r2, [pc, #36]	@ (8004288 <vPortSetupTimerInterrupt+0x3c>)
 8004262:	fba2 2303 	umull	r2, r3, r2, r3
 8004266:	099b      	lsrs	r3, r3, #6
 8004268:	4a08      	ldr	r2, [pc, #32]	@ (800428c <vPortSetupTimerInterrupt+0x40>)
 800426a:	3b01      	subs	r3, #1
 800426c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800426e:	4b03      	ldr	r3, [pc, #12]	@ (800427c <vPortSetupTimerInterrupt+0x30>)
 8004270:	2207      	movs	r2, #7
 8004272:	601a      	str	r2, [r3, #0]
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr
 800427c:	e000e010 	.word	0xe000e010
 8004280:	e000e018 	.word	0xe000e018
 8004284:	20000004 	.word	0x20000004
 8004288:	10624dd3 	.word	0x10624dd3
 800428c:	e000e014 	.word	0xe000e014

08004290 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004296:	f3ef 8305 	mrs	r3, IPSR
 800429a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b0f      	cmp	r3, #15
 80042a0:	d915      	bls.n	80042ce <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80042a2:	4a17      	ldr	r2, [pc, #92]	@ (8004300 <vPortValidateInterruptPriority+0x70>)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80042ac:	4b15      	ldr	r3, [pc, #84]	@ (8004304 <vPortValidateInterruptPriority+0x74>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	7afa      	ldrb	r2, [r7, #11]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d20b      	bcs.n	80042ce <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80042b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	607b      	str	r3, [r7, #4]
}
 80042c8:	bf00      	nop
 80042ca:	bf00      	nop
 80042cc:	e7fd      	b.n	80042ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80042ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004308 <vPortValidateInterruptPriority+0x78>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80042d6:	4b0d      	ldr	r3, [pc, #52]	@ (800430c <vPortValidateInterruptPriority+0x7c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d90b      	bls.n	80042f6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80042de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	603b      	str	r3, [r7, #0]
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	e7fd      	b.n	80042f2 <vPortValidateInterruptPriority+0x62>
	}
 80042f6:	bf00      	nop
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr
 8004300:	e000e3f0 	.word	0xe000e3f0
 8004304:	20000db0 	.word	0x20000db0
 8004308:	e000ed0c 	.word	0xe000ed0c
 800430c:	20000db4 	.word	0x20000db4

08004310 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08a      	sub	sp, #40	@ 0x28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004318:	2300      	movs	r3, #0
 800431a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800431c:	f7fe fe14 	bl	8002f48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004320:	4b5a      	ldr	r3, [pc, #360]	@ (800448c <pvPortMalloc+0x17c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004328:	f000 f916 	bl	8004558 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800432c:	4b58      	ldr	r3, [pc, #352]	@ (8004490 <pvPortMalloc+0x180>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	f040 8090 	bne.w	800445a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01e      	beq.n	800437e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004340:	2208      	movs	r2, #8
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4413      	add	r3, r2
 8004346:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	2b00      	cmp	r3, #0
 8004350:	d015      	beq.n	800437e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f023 0307 	bic.w	r3, r3, #7
 8004358:	3308      	adds	r3, #8
 800435a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f003 0307 	and.w	r3, r3, #7
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <pvPortMalloc+0x6e>
	__asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	617b      	str	r3, [r7, #20]
}
 8004378:	bf00      	nop
 800437a:	bf00      	nop
 800437c:	e7fd      	b.n	800437a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d06a      	beq.n	800445a <pvPortMalloc+0x14a>
 8004384:	4b43      	ldr	r3, [pc, #268]	@ (8004494 <pvPortMalloc+0x184>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	429a      	cmp	r2, r3
 800438c:	d865      	bhi.n	800445a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800438e:	4b42      	ldr	r3, [pc, #264]	@ (8004498 <pvPortMalloc+0x188>)
 8004390:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004392:	4b41      	ldr	r3, [pc, #260]	@ (8004498 <pvPortMalloc+0x188>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004398:	e004      	b.n	80043a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d903      	bls.n	80043b6 <pvPortMalloc+0xa6>
 80043ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f1      	bne.n	800439a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80043b6:	4b35      	ldr	r3, [pc, #212]	@ (800448c <pvPortMalloc+0x17c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043bc:	429a      	cmp	r2, r3
 80043be:	d04c      	beq.n	800445a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2208      	movs	r2, #8
 80043c6:	4413      	add	r3, r2
 80043c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	1ad2      	subs	r2, r2, r3
 80043da:	2308      	movs	r3, #8
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	429a      	cmp	r2, r3
 80043e0:	d920      	bls.n	8004424 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4413      	add	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00b      	beq.n	800440c <pvPortMalloc+0xfc>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	613b      	str	r3, [r7, #16]
}
 8004406:	bf00      	nop
 8004408:	bf00      	nop
 800440a:	e7fd      	b.n	8004408 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800440c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	1ad2      	subs	r2, r2, r3
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800441e:	69b8      	ldr	r0, [r7, #24]
 8004420:	f000 f8fc 	bl	800461c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004424:	4b1b      	ldr	r3, [pc, #108]	@ (8004494 <pvPortMalloc+0x184>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	4a19      	ldr	r2, [pc, #100]	@ (8004494 <pvPortMalloc+0x184>)
 8004430:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004432:	4b18      	ldr	r3, [pc, #96]	@ (8004494 <pvPortMalloc+0x184>)
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	4b19      	ldr	r3, [pc, #100]	@ (800449c <pvPortMalloc+0x18c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d203      	bcs.n	8004446 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800443e:	4b15      	ldr	r3, [pc, #84]	@ (8004494 <pvPortMalloc+0x184>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a16      	ldr	r2, [pc, #88]	@ (800449c <pvPortMalloc+0x18c>)
 8004444:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	4b11      	ldr	r3, [pc, #68]	@ (8004490 <pvPortMalloc+0x180>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	431a      	orrs	r2, r3
 8004450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004452:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800445a:	f7fe fd83 	bl	8002f64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00b      	beq.n	8004480 <pvPortMalloc+0x170>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	60fb      	str	r3, [r7, #12]
}
 800447a:	bf00      	nop
 800447c:	bf00      	nop
 800447e:	e7fd      	b.n	800447c <pvPortMalloc+0x16c>
	return pvReturn;
 8004480:	69fb      	ldr	r3, [r7, #28]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3728      	adds	r7, #40	@ 0x28
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	200019c0 	.word	0x200019c0
 8004490:	200019cc 	.word	0x200019cc
 8004494:	200019c4 	.word	0x200019c4
 8004498:	200019b8 	.word	0x200019b8
 800449c:	200019c8 	.word	0x200019c8

080044a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d04a      	beq.n	8004548 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80044b2:	2308      	movs	r3, #8
 80044b4:	425b      	negs	r3, r3
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4413      	add	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	4b22      	ldr	r3, [pc, #136]	@ (8004550 <vPortFree+0xb0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10b      	bne.n	80044e6 <vPortFree+0x46>
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	60fb      	str	r3, [r7, #12]
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	e7fd      	b.n	80044e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00b      	beq.n	8004506 <vPortFree+0x66>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	60bb      	str	r3, [r7, #8]
}
 8004500:	bf00      	nop
 8004502:	bf00      	nop
 8004504:	e7fd      	b.n	8004502 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	4b11      	ldr	r3, [pc, #68]	@ (8004550 <vPortFree+0xb0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4013      	ands	r3, r2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d019      	beq.n	8004548 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d115      	bne.n	8004548 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	4b0b      	ldr	r3, [pc, #44]	@ (8004550 <vPortFree+0xb0>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	43db      	mvns	r3, r3
 8004526:	401a      	ands	r2, r3
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800452c:	f7fe fd0c 	bl	8002f48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	4b07      	ldr	r3, [pc, #28]	@ (8004554 <vPortFree+0xb4>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4413      	add	r3, r2
 800453a:	4a06      	ldr	r2, [pc, #24]	@ (8004554 <vPortFree+0xb4>)
 800453c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800453e:	6938      	ldr	r0, [r7, #16]
 8004540:	f000 f86c 	bl	800461c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004544:	f7fe fd0e 	bl	8002f64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004548:	bf00      	nop
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	200019cc 	.word	0x200019cc
 8004554:	200019c4 	.word	0x200019c4

08004558 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800455e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004562:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004564:	4b27      	ldr	r3, [pc, #156]	@ (8004604 <prvHeapInit+0xac>)
 8004566:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00c      	beq.n	800458c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3307      	adds	r3, #7
 8004576:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0307 	bic.w	r3, r3, #7
 800457e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	4a1f      	ldr	r2, [pc, #124]	@ (8004604 <prvHeapInit+0xac>)
 8004588:	4413      	add	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004590:	4a1d      	ldr	r2, [pc, #116]	@ (8004608 <prvHeapInit+0xb0>)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004596:	4b1c      	ldr	r3, [pc, #112]	@ (8004608 <prvHeapInit+0xb0>)
 8004598:	2200      	movs	r2, #0
 800459a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	4413      	add	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80045a4:	2208      	movs	r2, #8
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	1a9b      	subs	r3, r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 0307 	bic.w	r3, r3, #7
 80045b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4a15      	ldr	r2, [pc, #84]	@ (800460c <prvHeapInit+0xb4>)
 80045b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80045ba:	4b14      	ldr	r3, [pc, #80]	@ (800460c <prvHeapInit+0xb4>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2200      	movs	r2, #0
 80045c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80045c2:	4b12      	ldr	r3, [pc, #72]	@ (800460c <prvHeapInit+0xb4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	1ad2      	subs	r2, r2, r3
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045d8:	4b0c      	ldr	r3, [pc, #48]	@ (800460c <prvHeapInit+0xb4>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	4a0a      	ldr	r2, [pc, #40]	@ (8004610 <prvHeapInit+0xb8>)
 80045e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	4a09      	ldr	r2, [pc, #36]	@ (8004614 <prvHeapInit+0xbc>)
 80045ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045f0:	4b09      	ldr	r3, [pc, #36]	@ (8004618 <prvHeapInit+0xc0>)
 80045f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80045f6:	601a      	str	r2, [r3, #0]
}
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	20000db8 	.word	0x20000db8
 8004608:	200019b8 	.word	0x200019b8
 800460c:	200019c0 	.word	0x200019c0
 8004610:	200019c8 	.word	0x200019c8
 8004614:	200019c4 	.word	0x200019c4
 8004618:	200019cc 	.word	0x200019cc

0800461c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004624:	4b27      	ldr	r3, [pc, #156]	@ (80046c4 <prvInsertBlockIntoFreeList+0xa8>)
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	e002      	b.n	8004630 <prvInsertBlockIntoFreeList+0x14>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	429a      	cmp	r2, r3
 8004638:	d8f7      	bhi.n	800462a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	4413      	add	r3, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	429a      	cmp	r2, r3
 800464a:	d108      	bne.n	800465e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	441a      	add	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	441a      	add	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d118      	bne.n	80046a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4b14      	ldr	r3, [pc, #80]	@ (80046c8 <prvInsertBlockIntoFreeList+0xac>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d00d      	beq.n	800469a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	441a      	add	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	e008      	b.n	80046ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800469a:	4b0b      	ldr	r3, [pc, #44]	@ (80046c8 <prvInsertBlockIntoFreeList+0xac>)
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	e003      	b.n	80046ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d002      	beq.n	80046ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046ba:	bf00      	nop
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr
 80046c4:	200019b8 	.word	0x200019b8
 80046c8:	200019c0 	.word	0x200019c0

080046cc <memset>:
 80046cc:	4603      	mov	r3, r0
 80046ce:	4402      	add	r2, r0
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d100      	bne.n	80046d6 <memset+0xa>
 80046d4:	4770      	bx	lr
 80046d6:	f803 1b01 	strb.w	r1, [r3], #1
 80046da:	e7f9      	b.n	80046d0 <memset+0x4>

080046dc <__libc_init_array>:
 80046dc:	b570      	push	{r4, r5, r6, lr}
 80046de:	2600      	movs	r6, #0
 80046e0:	4d0c      	ldr	r5, [pc, #48]	@ (8004714 <__libc_init_array+0x38>)
 80046e2:	4c0d      	ldr	r4, [pc, #52]	@ (8004718 <__libc_init_array+0x3c>)
 80046e4:	1b64      	subs	r4, r4, r5
 80046e6:	10a4      	asrs	r4, r4, #2
 80046e8:	42a6      	cmp	r6, r4
 80046ea:	d109      	bne.n	8004700 <__libc_init_array+0x24>
 80046ec:	f000 f828 	bl	8004740 <_init>
 80046f0:	2600      	movs	r6, #0
 80046f2:	4d0a      	ldr	r5, [pc, #40]	@ (800471c <__libc_init_array+0x40>)
 80046f4:	4c0a      	ldr	r4, [pc, #40]	@ (8004720 <__libc_init_array+0x44>)
 80046f6:	1b64      	subs	r4, r4, r5
 80046f8:	10a4      	asrs	r4, r4, #2
 80046fa:	42a6      	cmp	r6, r4
 80046fc:	d105      	bne.n	800470a <__libc_init_array+0x2e>
 80046fe:	bd70      	pop	{r4, r5, r6, pc}
 8004700:	f855 3b04 	ldr.w	r3, [r5], #4
 8004704:	4798      	blx	r3
 8004706:	3601      	adds	r6, #1
 8004708:	e7ee      	b.n	80046e8 <__libc_init_array+0xc>
 800470a:	f855 3b04 	ldr.w	r3, [r5], #4
 800470e:	4798      	blx	r3
 8004710:	3601      	adds	r6, #1
 8004712:	e7f2      	b.n	80046fa <__libc_init_array+0x1e>
 8004714:	080047fc 	.word	0x080047fc
 8004718:	080047fc 	.word	0x080047fc
 800471c:	080047fc 	.word	0x080047fc
 8004720:	08004800 	.word	0x08004800

08004724 <memcpy>:
 8004724:	440a      	add	r2, r1
 8004726:	4291      	cmp	r1, r2
 8004728:	f100 33ff 	add.w	r3, r0, #4294967295
 800472c:	d100      	bne.n	8004730 <memcpy+0xc>
 800472e:	4770      	bx	lr
 8004730:	b510      	push	{r4, lr}
 8004732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004736:	4291      	cmp	r1, r2
 8004738:	f803 4f01 	strb.w	r4, [r3, #1]!
 800473c:	d1f9      	bne.n	8004732 <memcpy+0xe>
 800473e:	bd10      	pop	{r4, pc}

08004740 <_init>:
 8004740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004742:	bf00      	nop
 8004744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004746:	bc08      	pop	{r3}
 8004748:	469e      	mov	lr, r3
 800474a:	4770      	bx	lr

0800474c <_fini>:
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	bf00      	nop
 8004750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004752:	bc08      	pop	{r3}
 8004754:	469e      	mov	lr, r3
 8004756:	4770      	bx	lr
